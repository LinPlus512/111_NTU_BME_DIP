# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import cv2
import sys
from matplotlib import pyplot as plt
import numpy as np
import pywt

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 768)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        MainWindow.setFont(font)

        self.tabWidget = QtWidgets.QTabWidget(MainWindow)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 1900, 748))
        self.tabWidget.setObjectName("tabWidget")

        # <-----Tab 1 (start)-----> #
        self.tab_1 = QtWidgets.QWidget()
        self.tab_1.setObjectName("tab_1")

        self.btn_part1_open = QtWidgets.QPushButton(self.tab_1)
        self.btn_part1_open.setGeometry(QtCore.QRect(10, 10, 120, 32))
        self.btn_part1_open.setObjectName("btn_part1_open")
        self.btn_part1_open.clicked.connect(self.btn_openFile_clicked)

        self.comboBox_part1 = QtWidgets.QComboBox(self.tab_1)
        self.comboBox_part1.setGeometry(QtCore.QRect(10, 50, 120, 26))
        self.comboBox_part1.setObjectName("comboBox_part1")
        self.comboBox_part1.addItems(['Trapezoidal Transformation', 'Wavy Transformation', 'Circular Transformation'])
        self.comboBox_part1.setCurrentIndex(0) # 起始 index = 0
        self.comboBox_part1.currentIndexChanged.connect(self.part1_combobox_change)
        self.part1_combobox_val = int(self.comboBox_part1.currentIndex()) + 1 # 起始的combo val
        
        # print(int(self.comboBox_part1.currentIndex()) + 1)

        self.slider_part1_q1_horizontal = QtWidgets.QSlider(self.tab_1)
        self.slider_part1_q1_horizontal.setGeometry(QtCore.QRect(10, 120, 160, 22))
        self.slider_part1_q1_horizontal.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.slider_part1_q1_horizontal.setObjectName("slider_part1_q1_horizontal")
        # self.slider_part1_q1_horizontal.setMaximum(10)
        self.Trapezoidal_H = 0
        self.slider_part1_q1_horizontal.valueChanged.connect(self.getslidervalue_1)

        self.slider_part1_q1_vertical = QtWidgets.QSlider(self.tab_1)
        self.slider_part1_q1_vertical.setGeometry(QtCore.QRect(10, 170, 160, 22))
        self.slider_part1_q1_vertical.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.slider_part1_q1_vertical.setObjectName("slider_part1_q1_vertical")
        # self.slider_part1_q1_vertical.setMinimum(1)
        self.Trapezoidal_V = 1
        self.slider_part1_q1_vertical.valueChanged.connect(self.getslidervalue_2)

        self.lb_part1_q1_horizontal = QtWidgets.QLabel(self.tab_1)
        self.lb_part1_q1_horizontal.setGeometry(QtCore.QRect(10, 90, 120, 16))
        self.lb_part1_q1_horizontal.setObjectName("lb_part1_q1_horizontal")

        self.lb_part1_q1_vertical = QtWidgets.QLabel(self.tab_1)
        self.lb_part1_q1_vertical.setGeometry(QtCore.QRect(10, 150, 120, 16))
        self.lb_part1_q1_vertical.setObjectName("lb_part1_q1_vertical")

        self.checkBox_part1_q2_horizontal = QtWidgets.QCheckBox(self.tab_1)
        self.checkBox_part1_q2_horizontal.setGeometry(QtCore.QRect(10, 200, 87, 20))
        self.checkBox_part1_q2_horizontal.setObjectName("checkBox_part1_q2_horizontal")

        self.checkBox_part1_q2_vertical = QtWidgets.QCheckBox(self.tab_1)
        self.checkBox_part1_q2_vertical.setGeometry(QtCore.QRect(10, 230, 87, 20))
        self.checkBox_part1_q2_vertical.setObjectName("checkBox_part1_q2_vertical")

        self.lb_part1_q2_amplitude = QtWidgets.QLabel(self.tab_1)
        self.lb_part1_q2_amplitude.setGeometry(QtCore.QRect(10, 270, 120, 16))
        self.lb_part1_q2_amplitude.setObjectName("lb_part1_q2_amplitude")

        self.slider_part1_q2_amplitude = QtWidgets.QSlider(self.tab_1)
        self.slider_part1_q2_amplitude.setGeometry(QtCore.QRect(10, 300, 160, 22))
        self.slider_part1_q2_amplitude.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.slider_part1_q2_amplitude.setObjectName("slider_part1_q2_amplitude")
        self.Amplitude = 0
        self.slider_part1_q2_amplitude.valueChanged.connect(self.getslidervalue_1)
        
        self.slider_part1_q3_radius = QtWidgets.QSlider(self.tab_1)
        self.slider_part1_q3_radius.setGeometry(QtCore.QRect(10, 370, 160, 22))
        self.slider_part1_q3_radius.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.slider_part1_q3_radius.setObjectName("slider_part1_q3_radius")
        self.radius = 0
        self.slider_part1_q3_radius.valueChanged.connect(self.getslidervalue_1)
        
        self.lb_part1_q3_RadiusPercent = QtWidgets.QLabel(self.tab_1)
        self.lb_part1_q3_RadiusPercent.setGeometry(QtCore.QRect(10, 340, 150, 16))
        self.lb_part1_q3_RadiusPercent.setObjectName("lb_part1_q3_RadiusPercent")

        self.btn_part1_show = QtWidgets.QPushButton(self.tab_1)
        self.btn_part1_show.setGeometry(QtCore.QRect(10, 410, 120, 32))
        self.btn_part1_show.setObjectName("btn_part1_show")
        self.btn_part1_show.clicked.connect(self.btn_show_clicked)

        self.img_part1_original = QtWidgets.QLabel(self.tab_1)
        self.img_part1_original.setGeometry(QtCore.QRect(180, 40, 512, 512))
        self.img_part1_original.setText("")
        self.img_part1_original.setObjectName("img_part1_original")
        self.img_part1_original.setScaledContents(True)

        self.lb_part1_original = QtWidgets.QLabel(self.tab_1)
        self.lb_part1_original.setGeometry(QtCore.QRect(180, 10, 120, 16))
        self.lb_part1_original.setObjectName("lb_part1_original")

        self.lb_part1_result = QtWidgets.QLabel(self.tab_1)
        self.lb_part1_result.setGeometry(QtCore.QRect(840, 10, 120, 16))
        self.lb_part1_result.setObjectName("lb_part1_result")

        self.img_part1_result = QtWidgets.QLabel(self.tab_1)
        self.img_part1_result.setGeometry(QtCore.QRect(840, 40, 512, 512))
        self.img_part1_result.setText("")
        self.img_part1_result.setObjectName("img_part1_result")
        self.img_part1_result.setScaledContents(True)

        self.tabWidget.addTab(self.tab_1, "")
        # <-----Tab 1 (end)-----> #

        # <-----Tab 2 (start)-----> #
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")

        self.part2_path = []  # 存放路徑用
        self.part2_Browser_text = '目前讀取檔案：\n' # 顯示在browser
        self.btn_part2_open = QtWidgets.QPushButton(self.tab_2)
        self.btn_part2_open.setGeometry(QtCore.QRect(10, 10, 120, 32))
        self.btn_part2_open.setObjectName("btn_part2_open")
        self.btn_part2_open.clicked.connect(self.btn_openFile_clicked)

        self.textBrowser_part2_filelist = QtWidgets.QTextBrowser(self.tab_2)
        self.textBrowser_part2_filelist.setGeometry(QtCore.QRect(10, 50, 256, 192))
        self.textBrowser_part2_filelist.setObjectName("textBrowser_part2_filelist")

        self.btn_part2_show = QtWidgets.QPushButton(self.tab_2)
        self.btn_part2_show.setGeometry(QtCore.QRect(10, 250, 120, 32))
        self.btn_part2_show.setObjectName("btn_part2_show")
        self.btn_part2_show.clicked.connect(self.btn_show_clicked)

        self.img_part2_result = QtWidgets.QLabel(self.tab_2)
        self.img_part2_result.setGeometry(QtCore.QRect(960, 30, 512, 512))
        self.img_part2_result.setText("")
        self.img_part2_result.setObjectName("img_part2_result")
        self.img_part2_result.setScaledContents(True)

        self.lb_part2_result = QtWidgets.QLabel(self.tab_2)
        self.lb_part2_result.setGeometry(QtCore.QRect(960, 0, 120, 16))
        self.lb_part2_result.setObjectName("lb_part2_result")

        self.lb_part2_file1_img = QtWidgets.QLabel(self.tab_2)
        self.lb_part2_file1_img.setGeometry(QtCore.QRect(300, 0, 120, 16))
        self.lb_part2_file1_img.setObjectName("lb_part2_file1_img")

        self.img_part2_file1_img = QtWidgets.QLabel(self.tab_2)
        self.img_part2_file1_img.setGeometry(QtCore.QRect(300, 30, 512, 512))
        self.img_part2_file1_img.setText("")
        self.img_part2_file1_img.setObjectName("img_part2_file1_img")
        self.img_part2_file1_img.setScaledContents(True)

        self.tabWidget.addTab(self.tab_2, "")
        # <-----Tab 2 (end)-----> #

        # <-----Tab 3 (start)-----> #
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")

        self.img_part3_result = QtWidgets.QLabel(self.tab_3)
        self.img_part3_result.setGeometry(QtCore.QRect(840, 40, 512, 512))
        self.img_part3_result.setText("")
        self.img_part3_result.setObjectName("img_part3_result")

        self.lb_part3_result = QtWidgets.QLabel(self.tab_3)
        self.lb_part3_result.setGeometry(QtCore.QRect(840, 10, 120, 16))
        self.lb_part3_result.setObjectName("lb_part3_result")

        self.btn_part3_open = QtWidgets.QPushButton(self.tab_3)
        self.btn_part3_open.setGeometry(QtCore.QRect(10, 10, 120, 32))
        self.btn_part3_open.setObjectName("btn_part3_open")
        self.btn_part3_open.clicked.connect(self.btn_openFile_clicked)

        self.lb_part3_original = QtWidgets.QLabel(self.tab_3)
        self.lb_part3_original.setGeometry(QtCore.QRect(180, 10, 120, 16))
        self.lb_part3_original.setObjectName("lb_part3_original")

        self.img_part3_original = QtWidgets.QLabel(self.tab_3)
        self.img_part3_original.setGeometry(QtCore.QRect(180, 40, 512, 512))
        self.img_part3_original.setText("")
        self.img_part3_original.setObjectName("img_part3_original")

        self.slider_part3_canny_th1 = QtWidgets.QSlider(self.tab_3)
        self.slider_part3_canny_th1.setGeometry(QtCore.QRect(10, 80, 160, 22))
        self.slider_part3_canny_th1.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.slider_part3_canny_th1.setObjectName("slider_part3_canny_th1")
        self.slider_part3_canny_th1.valueChanged.connect(self.getslidervalue_1)
        
        self.lb_part3_canny_th1 = QtWidgets.QLabel(self.tab_3)
        self.lb_part3_canny_th1.setGeometry(QtCore.QRect(10, 50, 150, 16))
        self.lb_part3_canny_th1.setObjectName("lb_part3_canny_th1")

        self.slider_part3_canny_th2 = QtWidgets.QSlider(self.tab_3)
        self.slider_part3_canny_th2.setGeometry(QtCore.QRect(10, 140, 160, 22))
        self.slider_part3_canny_th2.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.slider_part3_canny_th2.setObjectName("slider_part3_canny_th2")
        self.slider_part3_canny_th2.valueChanged.connect(self.getslidervalue_2)

        self.lb_part3_canny_th2 = QtWidgets.QLabel(self.tab_3)
        self.lb_part3_canny_th2.setGeometry(QtCore.QRect(10, 110, 150, 16))
        self.lb_part3_canny_th2.setObjectName("lb_part3_canny_th2")

        self.slider_part3_hough_th = QtWidgets.QSlider(self.tab_3)
        self.slider_part3_hough_th.setGeometry(QtCore.QRect(10, 210, 160, 22))
        self.slider_part3_hough_th.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.slider_part3_hough_th.setObjectName("slider_part3_hough_th")
        self.slider_part3_hough_th.valueChanged.connect(self.getslidervalue_3)

        self.lb_part3_hough_th = QtWidgets.QLabel(self.tab_3)
        self.lb_part3_hough_th.setGeometry(QtCore.QRect(10, 180, 150, 16))
        self.lb_part3_hough_th.setObjectName("lb_part3_hough_th")

        self.btn_part3_show = QtWidgets.QPushButton(self.tab_3)
        self.btn_part3_show.setGeometry(QtCore.QRect(10, 250, 120, 32))
        self.btn_part3_show.setText('show')
        self.btn_part3_show.clicked.connect(self.btn_show_clicked)

        self.img_part3_o = QtWidgets.QLabel(self.tab_3)
        self.img_part3_o.setGeometry(QtCore.QRect(10, 280, 64, 64))
        self.img_part3_o.setScaledContents(True)

        self.lb_part3_parameter = QtWidgets.QLabel(self.tab_3)
        self.lb_part3_parameter.setGeometry(QtCore.QRect(10, 550, 120, 60))
        


        self.tabWidget.addTab(self.tab_3, "")
        # <-----Tab 3 (end)-----> #

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.tabWidget.tabBarClicked.connect(self.tabbar_clicked)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 一開始的function, parameter
        self.part1_combobox_change()
        self.state = self.tabWidget.currentIndex() + 1
        self.canny_th1, self.canny_th2, self.hough_th = 0, 0, 0
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "R11631029"))
        self.btn_part1_open.setText(_translate("MainWindow", "Open File"))
        self.lb_part1_q1_horizontal.setText(_translate("MainWindow", "Horizontal-->"))
        self.lb_part1_q1_vertical.setText(_translate("MainWindow", "Vertical-->"))
        self.checkBox_part1_q2_horizontal.setText(_translate("MainWindow", "Horizontal"))
        self.checkBox_part1_q2_vertical.setText(_translate("MainWindow", "Vertical"))
        self.lb_part1_q2_amplitude.setText(_translate("MainWindow", "Amplitude-->"))
        self.lb_part1_q3_RadiusPercent.setText(_translate("MainWindow", "Radius percent-->"))
        self.btn_part1_show.setText(_translate("MainWindow", "Show"))
        self.lb_part1_original.setText(_translate("MainWindow", "original image"))
        self.lb_part1_result.setText(_translate("MainWindow", "result"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_1), _translate("MainWindow", "Part 1"))
        self.btn_part2_open.setText(_translate("MainWindow", "Add File"))
        self.textBrowser_part2_filelist.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Arial\'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">目前讀取檔案：</p></body></html>"))
        self.btn_part2_show.setText(_translate("MainWindow", "Show"))
        self.lb_part2_result.setText(_translate("MainWindow", "result"))
        self.lb_part2_file1_img.setText(_translate("MainWindow", "original image"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Part 2"))
        self.lb_part3_result.setText(_translate("MainWindow", "Hough"))
        self.btn_part3_open.setText(_translate("MainWindow", "Open File"))
        self.lb_part3_original.setText(_translate("MainWindow", "Canny"))
        self.lb_part3_canny_th1.setText(_translate("MainWindow", "Canny Threshold1: "))
        self.lb_part3_canny_th2.setText(_translate("MainWindow", "Canny Threshold2: "))
        self.lb_part3_hough_th.setText(_translate("MainWindow", "Hough Threshold: "))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Part 3"))

    # tabbar_clicked
    def tabbar_clicked(self, index):
        self.state = index + 1
        print(self.state)
        '''
        self.state = 1 --> part 1
        self.state = 2 --> part 2
        self.state = 3 --> part 3
        '''

    # btn_openFile clicked
    def btn_openFile_clicked(self):
        try:
            self.image_path, ret= QtWidgets.QFileDialog.getOpenFileName()

            if (self.state == 1):
                self.im = cv2.imread(self.image_path) 
            elif (self.state == 2):
                self.part2_path.append(self.image_path)
                self.part2_Browser_text += self.image_path.split('/')[-1] + '\n'
                self.textBrowser_part2_filelist.setText(self.part2_Browser_text)

            else:
                self.im = cv2.imread(self.image_path) 
                self.img_part3_o.setPixmap(self.array2pixmap(self.im.astype('uint8')))
                
            # print(image_path) 
        except:
            Error_Text = '請重新讀檔，並確認路徑不存在奇怪字元（ex:中文）'
            QtWidgets.QMessageBox.information(None, 'Read Me', Error_Text)
    
    # part 1 combobox change
    def part1_combobox_change(self):
        self.part1_combobox_val = int(self.comboBox_part1.currentIndex()) + 1
        # print(self.part1_combobox_val)
        if (self.part1_combobox_val == 1):
            # print(1)
            self.slider_part1_q1_horizontal.setEnabled(1)
            self.slider_part1_q1_vertical.setEnabled(1)
            self.lb_part1_q1_horizontal.setEnabled(1)
            self.lb_part1_q1_vertical.setEnabled(1)
            
            self.checkBox_part1_q2_horizontal.setEnabled(0)
            self.checkBox_part1_q2_vertical.setEnabled(0)
            self.lb_part1_q2_amplitude.setEnabled(0)
            self.slider_part1_q2_amplitude.setEnabled(0)
            
            self.lb_part1_q3_RadiusPercent.setEnabled(0)
            self.slider_part1_q3_radius.setEnabled(0)

        elif (self.part1_combobox_val == 2):
            self.slider_part1_q1_horizontal.setEnabled(0)
            self.slider_part1_q1_vertical.setEnabled(0)
            self.lb_part1_q1_horizontal.setEnabled(0)
            self.lb_part1_q1_vertical.setEnabled(0)
            
            self.checkBox_part1_q2_horizontal.setEnabled(1)
            self.checkBox_part1_q2_vertical.setEnabled(1)
            self.lb_part1_q2_amplitude.setEnabled(1)
            self.slider_part1_q2_amplitude.setEnabled(1)
            
            self.lb_part1_q3_RadiusPercent.setEnabled(0)
            self.slider_part1_q3_radius.setEnabled(0)

        else:
            self.slider_part1_q1_horizontal.setEnabled(0)
            self.slider_part1_q1_vertical.setEnabled(0)
            self.lb_part1_q1_horizontal.setEnabled(0)
            self.lb_part1_q1_vertical.setEnabled(0)
            
            self.checkBox_part1_q2_horizontal.setEnabled(0)
            self.checkBox_part1_q2_vertical.setEnabled(0)
            self.lb_part1_q2_amplitude.setEnabled(0)
            self.slider_part1_q2_amplitude.setEnabled(0)
            
            self.lb_part1_q3_RadiusPercent.setEnabled(1)
            self.slider_part1_q3_radius.setEnabled(1)

        
    
    # show image by array in pyqt6
    def array2pixmap(self, img):
        # Use: label.setPixmap(result)
        # img = img.astype('float32')
        if len(img.shape) < 3:
            frame = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
        else:
            frame = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        h, w = img.shape[:2]
        bytesPerLine = 3 * w
        qimage = QtGui.QImage(frame.data, w, h, bytesPerLine, QtGui.QImage.Format.Format_RGB888) 
        result  = QtGui.QPixmap(qimage)
        return result
    
    # show
    def btn_show_clicked(self):
        if (self.state == 1): # part 1
            if (self.part1_combobox_val == 1):
                part1_result = do_Trapezoidal(self.im, self.Trapezoidal_H, self.Trapezoidal_V)
                self.img_part1_original.setPixmap(self.array2pixmap(self.im.astype('uint8')))
                self.img_part1_result.setPixmap(self.array2pixmap(part1_result.astype('uint8')))
            if (self.part1_combobox_val == 2):
                if (self.checkBox_part1_q2_horizontal.isChecked()):
                    H = 1
                else:
                    H = 0
                if (self.checkBox_part1_q2_vertical.isChecked()):
                    V = 1
                else:
                    V =0
                # print(H, V)
                part1_result = do_Wavy(self.im, self.Amplitude, H, V)
                self.img_part1_original.setPixmap(self.array2pixmap(self.im.astype('uint8')))
                self.img_part1_result.setPixmap(self.array2pixmap(part1_result.astype('uint8')))
            if (self.part1_combobox_val == 3):
                part1_result = do_Circular(self.im, self.radius)
                self.img_part1_original.setPixmap(self.array2pixmap(self.im.astype('uint8')))
                self.img_part1_result.setPixmap(self.array2pixmap(part1_result.astype('uint8')))
        
        if (self.state == 2): # part 2
            part2_result = do_pywt(self.part2_path)
            file1_img = cv2.imread(self.part2_path[0], 0)
            coeffs, g = DWT_process(file1_img)
            # print(self.part2_path)
            self.img_part2_file1_img.setPixmap(self.array2pixmap(g.astype('uint8')))
            self.img_part2_result.setPixmap(self.array2pixmap(part2_result.astype('uint8')))
            self.part2_path = []
            self.textBrowser_part2_filelist.setText('目前讀取檔案：\n')
        
        if (self.state == 3): # part 3
            (part3_result_img, part3_result_canny, part3_result_Hough), (perimeter, area) = Hough_Transform(self.im, self.canny_th1, self.canny_th2, self.hough_th)
            # print(perimeter, area)

            self.lb_part3_parameter.setText('perimeter = {:.2f}\narea = {:.2f}'.format(perimeter, area))
            self.img_part3_original.setPixmap(self.array2pixmap(part3_result_canny.astype('uint8')))
            self.img_part3_result.setPixmap(self.array2pixmap(part3_result_Hough.astype('uint8')))


    
    # slider 1 value 
    def getslidervalue_1(self):      
        if (self.state == 1):
            if (self.part1_combobox_val == 1):
                self.Trapezoidal_H = self.slider_part1_q1_horizontal.value() / 99 * 0.5
                self.lb_part1_q1_horizontal.setText('Horizontal--> {:.2f}'.format(self.Trapezoidal_H)) 
                # print(self.Trapezoidal_H)
            elif (self.part1_combobox_val == 2):
                self.Amplitude = self.slider_part1_q2_amplitude.value()
                self.lb_part1_q2_amplitude.setText('Amplitude--> {}'.format(self.Amplitude)) 
            else:
                self.radius = self.slider_part1_q3_radius.value() + 1
                self.lb_part1_q3_RadiusPercent.setText('Radius percent--> {}'.format(self.radius)) 
        else:
            self.canny_th1 = int(self.slider_part3_canny_th1.value() / 99 * 255)
            self.lb_part3_canny_th1.setText('Canny Threshold1: {}'.format(self.canny_th1))

    # slider 2 value 
    def getslidervalue_2(self):
        if (self.state == 1):
            self.Trapezoidal_V = int((self.slider_part1_q1_vertical.value() + 1) / 10)
            self.lb_part1_q1_vertical.setText('Vertical--> {}'.format(self.Trapezoidal_V)) 
            # print(self.Trapezoidal_V)
            
        else:
            self.canny_th2 = int(self.slider_part3_canny_th2.value() / 99 * 255)
            self.lb_part3_canny_th2.setText('Canny Threshold2: {}'.format(self.canny_th2))
            # print(self.canny_th2)

    # slider 3 value 
    def getslidervalue_3(self):      
            self.hough_th = int(self.slider_part3_hough_th.value() / 99 * 255)
            self.lb_part3_hough_th.setText('Hough Threshold: {}'.format(self.hough_th))

            # print(self.hough_th)
            

        


# <----- part 1 (start) -----> #
def Trapezoidal(img, horizontal_val, vertical_val):
    # img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    k = horizontal_val # 水平調整（0-0.5)
    h = vertical_val   # 垂直調整（>= 1）
    height, width = img.shape[:2]
    value = k * height
    resize_gray = np.zeros([int(height * h), width], np.uint8)
    for i in range (height) :
        temp = int( value + k * i ) 
        for j in range (temp, width - temp) :
            #每行非黑色區域的長度
            distance = int(width-temp) - int(temp-5)
            #缩小倍率
            ratio = distance / width
            #取點距離
            stepsize = 1.0 / ratio
            #將同意行缩小相同倍率
            resize_gray[i][j] = img[i][int((j - temp) * stepsize)]
    return resize_gray
def do_Trapezoidal(img, horizontal_val, vertical_val):
    im = img
    a1 = Trapezoidal(im[..., 0], horizontal_val, vertical_val)
    a2 = Trapezoidal(im[..., 1], horizontal_val, vertical_val)
    a3 = Trapezoidal(im[..., 2], horizontal_val, vertical_val)
    a = cv2.merge((a1, a2, a3))
    return a

#垂直+水平方向變形
def Wavy(img, amplitude, horizontal, vertical):
    # image =cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    image = img
    rows, cols = image.shape
    result = np.zeros(image.shape, dtype = image.dtype)   
    for i in range(rows):
        for j in range(cols):

            offset_x = horizontal * amplitude * np.cos(2 * np.pi * i / 180) # x=u+振幅*sin(2.0*π*v/頻率)
            offset_y = vertical * amplitude * np.sin(2 * np.pi * j / 180) # y=v+振幅*sin(2.0*π*u/頻率)

            if (j + offset_x < cols) and (i + offset_y < rows) and (j + offset_x > 0) and (i + offset_y > 0):
                result[i, j] = image[int(i + offset_y) % rows, int(j + offset_x) % cols]

            else:
                result[i, j] = 255
    return result 
def do_Wavy(img, amplitude, horizontal, vertical):
    im = img
    b1 = Wavy(im[..., 0], amplitude, horizontal, vertical)
    b2 = Wavy(im[..., 1], amplitude, horizontal, vertical)
    b3 = Wavy(im[..., 2], amplitude, horizontal, vertical)
    b = cv2.merge((b1, b2, b3))
    return b

def do_Circular(img, cir_radius_percent):
    height, width = img.shape[0], img.shape[1]
    heights, widths = img.shape[:2]
    heights = int(heights)
    widths = int(widths)
    radius = int(min(height, width) // 2 * cir_radius_percent / 100)
    #生成內顯示模板
    circleIn = np.zeros((heights, widths, 1), np.uint8)
    circleIn = cv2.circle(circleIn, (width // 2, height // 2), radius, (1), -1)
    #生成外顯示模板
    circleOut = circleIn.copy()
    circleOut[circleOut == 0] = 2
    circleOut[circleOut == 1] = 0
    circleOut[circleOut == 2] = 1
    #原圖與内顯示模板融合
    #生成空白陣列
    imgIn = np.zeros((height, width, 4), np.uint8)
    #複製前3個通道
    imgIn[:, :, 0] = np.multiply(img[:, :, 0], circleIn[:, :, 0])
    imgIn[:, :, 1] = np.multiply(img[:, :, 1], circleIn[:, :, 0])
    imgIn[:, :, 2] = np.multiply(img[:, :, 2], circleIn[:, :, 0])
    # 設置α通道的不透明部分
    circleIn[circleIn == 1] = 255
    imgIn[:, :, 3] = circleIn[:, :, 0]
    return imgIn # 彩色影像
# <----- part 1 (end) -----> #

# <----- part 2 (start) -----> #
def DWT_process(img, wavelet = 'haar'):
    nr, nc = img.shape
    # print(img.shape)
    coeffs = pywt.dwt2(img, wavelet)
    LL, (LH, HL, HH) = coeffs # shape會變成原圖的一半 (array, tuple): tuple
    # print(LL.shape)

    # 製作wavelet綜合顯示圖
    nr1, nc1 = LL.shape[:2]
    g = np.zeros([nr1 * 2, nc1 * 2], dtype='uint8')

    LL_normalize = np.zeros([nr1, nc1])
    cv2.normalize(LL, LL_normalize, 0, 255, cv2.NORM_MINMAX)
    k = 128 # 提高LH, HL, HH 亮度
    g[0:nr1, 0:nc1] = np.uint8(LL_normalize)

    g[0:nr1, nc1:nc1 * 2] = np.uint8(np.clip(LH + k, 0, 255))
    g[nr1:nr1 * 2, 0:nc1] = np.uint8(np.clip(HL + k, 0, 255))
    g[nr1:nr1 * 2, nc1:nc1 * 2] = np.uint8(np.clip(HH + k, 0, 255))


    # plt.imshow(g, cmap='img_gray')
    return coeffs, g

def DWT_merge(img1, img2, wavelet = 'haar'):
    co_img1, g1 = DWT_process(img1, wavelet=wavelet)
    LL1, (LH1, HL1, HH1) = co_img1
    co_img2, g2 = DWT_process(img2, wavelet=wavelet)
    LL2, (LH2, HL2, HH2) = co_img2

    # 用作業上的指示合成
    def max(A, B):
        h, w = A.shape
        C = np.zeros(A.shape)
        for i in range(h):
            for j in range(w):
                if (A[i, j] > B[i, j]):
                    C[i, j] = A[i, j]
                else:
                    C[i, j] = B[i, j]
        return C
    
    LL = (LL1 + LL2) / 2
    LH = max(LH1, LH2)
    HL = max(HL1, HL2)
    HH = max(HH1, HH2)
    coeffs_merge = (LL, (LH, HL, HH))
    result = pywt.idwt2(coeffs_merge, wavelet)
    return result

def do_pywt(img_list):
    for i in range(len(img_list) - 1):
        if (i == 0):
            a = cv2.imread(img_list[i], 0)
            b = cv2.imread(img_list[i + 1], 0)
            c = DWT_merge(a, b)
        else:
            a = c
            b = cv2.imread(img_list[i + 1], 0)
            c = DWT_merge(a, b)
    return c
# <----- part 2 (end) -----> #

# <----- part 3 (start) -----> #
def Hough_Transform(img, canny_TH1, canny_TH2, Hough_TH):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # BGR 2 GRAY
    canny_img = cv2.Canny(img, canny_TH1, canny_TH2, apertureSize=3)
    lines = cv2.HoughLines(canny_img, 1, np.pi / 180, Hough_TH)
    _, binary_edge = cv2.threshold(canny_img, 127 , 255 , cv2.THRESH_BINARY)
    _, binary_image = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    Hough_img = img.copy()
    perimeter = np.count_nonzero(binary_edge) / 4
    area = np.count_nonzero(binary_image) / 2
    for line in lines:
        rho = line[0][0]
        theta= line[0][1]
        if  (theta < (np.pi / 4)) or (theta > (3 * np.pi / 4)):
            pt1 = (int(rho / np.cos(theta)),0)
            pt2 = (int((rho - Hough_img.shape[0] * np.sin(theta)) / np.cos(theta)), Hough_img.shape[0])  
        else:
            pt1 = (0, int(rho / np.sin(theta)))
            pt2 = (Hough_img.shape[1], int((rho - Hough_img.shape[1] * np.cos(theta)) / np.sin(theta)))
        cv2.line(Hough_img, pt1, pt2, (0, 0, 0), (5))
    return (img, canny_img, Hough_img), (perimeter, area)

# <----- part 3 (end) -----> #


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QWidget()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
