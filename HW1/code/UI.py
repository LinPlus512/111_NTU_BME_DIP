# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib import pyplot as plt
import cv2
import numpy as np
import os

# Part 1 class
class Dot64_deal():
    # 直接run 所有函數
    def main(self, filepath):
        self.Read64(filepath)
        self.photo64toarray()
        self.statistics()
        self.histogram(self.Statistics)
        self.showImg()
    
    # Read .64 file
    def Read64(self, filepath):
        self.filepath = filepath
        self.filename = self.filepath.split('/')[-1] # 取出檔案名稱
        with open(self.filepath) as photo64:
            self.content = photo64.read()
            # print(self.content)
            photo64.close()

    # 32 to 0-255
    dict32 = {'0' : 0, '1' : 1, '2' :2 , '3' : 3, '4' : 4, '5' : 5, '6' : 6, '7' : 7, '8' : 8, '9' : 9
            , 'A' : 10, 'B' : 11, 'C' : 12, 'D' : 13, 'E' : 14, 'F' : 15, 'G' : 16, 'H' : 17, 'I' : 18
            , 'J' : 19, 'K' : 20, 'L' : 21, 'M' : 22, 'N' : 23, 'O' : 24, 'P' : 25, 'Q' : 26, 'R' : 27
            , 'S' : 28, 'T' : 29, 'U' : 30, 'V' : 31}
    def photo64toarray(self):
        row = []
        self.content2array = []   
        count = 0 # 用來計算是不是64列了    
        for i in self.content:
            if(count == 64):
                break
            if(i != '\n'):
                try:
                    row.append((self.dict32[i] + 1 ) * 8 - 1)
                except:
                    row.append(i)
            else:
                self.content2array.append(row)
                count += 1
                row = []
            if(i =='\x1a'): # deal some text which include '\x1a' in the ead. 
                row.remove('\x1a')
                self.content2array.append(row)
                count += 1
                break
        self.content2array = np.array(self.content2array)

    # Statistics the number of every symbols 
    def statistics(self):
        self.Statistics = []
        for i in self.dict32.keys():
            Count = 0
            for j in self.content:
                if(i == j):
                    Count += 1
            self.Statistics.append(Count)
        self.Statistics = np.array(self.Statistics)

    # Drawing the hist gram
    def histogram(self, Static):
        num = np.array(tuple(range(32)))
        # num = (num + 1 ) * 8 - 1
        plt.bar(range(32), Static)
        plt.title('Histogram of ' + self.filename)
        plt.xticks(range(32), num, rotation = -90)
        plt.savefig('log/part1_histogram.png')
        plt.close()
        
    def showImg(self):
        self.content2array = self.content2array / 1.0
        cv2.imwrite('log/part1_image.png', self.content2array)

# part 2 class: 將.64 轉換成0-255矩陣
class Dot64_part2():
    def __init__(self, filepath):
        self.filepath = filepath
        
    # Read file .64
    def read64(self):
        with open(self.filepath) as f:
            self.content = f.read()
            # print(self.content)
            f.close()
            
        return self.file64toarray()
        # print(self.content2array)
    
    # 32 to 0-255
    dict32 = {'0' : 0, '1' : 1, '2' :2 , '3' : 3, '4' : 4, '5' : 5, '6' : 6, '7' : 7, '8' : 8, '9' : 9
            , 'A' : 10, 'B' : 11, 'C' : 12, 'D' : 13, 'E' : 14, 'F' : 15, 'G' : 16, 'H' : 17, 'I' : 18
            , 'J' : 19, 'K' : 20, 'L' : 21, 'M' : 22, 'N' : 23, 'O' : 24, 'P' : 25, 'Q' : 26, 'R' : 27
            , 'S' : 28, 'T' : 29, 'U' : 30, 'V' : 31}
    
    def file64toarray(self):
        row = []
        self.content2array = []   
        count = 0 # 用來計算是不是64列了    
        for i in self.content:
            if(count == 64):
                break
            if(i != '\n'):
                try:
                    row.append((self.dict32[i] + 1 ) * 8 - 1)
                except:
                    row.append(i)
            else:
                self.content2array.append(row)
                count += 1
                row = []
            if(i =='\x1a'): # deal some text which include '\x1a' in the ead. 
                row.remove('\x1a')
                self.content2array.append(row)
                count += 1
                break
        return np.array(self.content2array) / 1.0 # 轉換成array (float型態)

# UI class
class Ui_MainWindow(object):
    
    # 建立處理.64檔案的Obj
    dot64_deal =  Dot64_deal()
    
    def setupUi(self, MainWindow):
        # 創建畫面
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 1000)
        MainWindow.setWindowIcon(QtGui.QIcon('image\logo.jpg'))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        # 創建part1 的按鈕
        self.buttom_part_1 = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part_1.setGeometry(QtCore.QRect(20, 80, 300, 100))
        font = QtGui.QFont()
        font.setFamily("Adobe Devanagari")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.buttom_part_1.setFont(font)
        self.buttom_part_1.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/icon_part1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttom_part_1.setIcon(icon)
        self.buttom_part_1.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part_1.setCheckable(False)
        self.buttom_part_1.setAutoDefault(False)
        self.buttom_part_1.setDefault(False)
        self.buttom_part_1.setFlat(False)
        self.buttom_part_1.setObjectName("buttom_part_1")
        self.buttom_part_1.clicked.connect(self.buttom_part1_clicked)
        
        # 創建part2 的按鈕
        self.buttom_part_2 = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part_2.setGeometry(QtCore.QRect(480, 80, 300, 100))
        font = QtGui.QFont()
        font.setFamily("Adobe Devanagari")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.buttom_part_2.setFont(font)
        self.buttom_part_2.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("image/icon_part2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttom_part_2.setIcon(icon1)
        self.buttom_part_2.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part_2.setCheckable(False)
        self.buttom_part_2.setAutoDefault(False)
        self.buttom_part_2.setDefault(False)
        self.buttom_part_2.setFlat(False)
        self.buttom_part_2.setObjectName("buttom_part_2")
        self.buttom_part_2.clicked.connect(self.buttom_part2_clicked)
        
        # 創建 label: 創作者資訊
        self.label_creatorInfo = QtWidgets.QLabel(self.centralwidget)
        self.label_creatorInfo.setGeometry(QtCore.QRect(20, 930, 241, 27))
        font = QtGui.QFont()
        font.setFamily("Adobe Devanagari")
        font.setPointSize(12)
        self.label_creatorInfo.setFont(font)
        self.label_creatorInfo.setAlignment(QtCore.Qt.AlignCenter)
        self.label_creatorInfo.setObjectName("label_creatorInfo")
        
        # 創建 readme按鈕
        self.buttom_readme = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_readme.setGeometry(QtCore.QRect(20, 200, 170, 59))
        font = QtGui.QFont()
        font.setFamily("Adobe Devanagari")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.buttom_readme.setFont(font)
        self.buttom_readme.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("image/icon_readme.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttom_readme.setIcon(icon2)
        self.buttom_readme.setIconSize(QtCore.QSize(50, 50))
        self.buttom_readme.setCheckable(False)
        self.buttom_readme.setAutoDefault(False)
        self.buttom_readme.setDefault(False)
        self.buttom_readme.setFlat(False)
        self.buttom_readme.setObjectName("buttom_readme")
        self.buttom_readme.clicked.connect(self.buttom_readme_clicked)
        
        # 創建 使用說明(textBroser)
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(230, 200, 551, 171))
        font = QtGui.QFont()
        font.setFamily("Adobe Devanagari")
        font.setPointSize(18)
        self.textBrowser.setFont(font)
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setVisible(False)
        
        # 創建 label: 課程名稱
        self.label_CourseName = QtWidgets.QLabel(self.centralwidget)
        self.label_CourseName.setGeometry(QtCore.QRect(180, 10, 432, 64))
        font = QtGui.QFont()
        font.setFamily("Adobe Devanagari")
        font.setPointSize(28)
        font.setBold(True)
        font.setWeight(75)
        self.label_CourseName.setFont(font)
        self.label_CourseName.setAlignment(QtCore.Qt.AlignCenter)
        self.label_CourseName.setObjectName("label_CourseName")
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # 建立part1 的畫面
        
        ## 建立回首頁的按鈕 buttom_part1_home
        self.buttom_part1_home = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part1_home.setGeometry(QtCore.QRect(10, 10, 150, 60))
        font = QtGui.QFont()
        font.setFamily("Adobe Devanagari")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.buttom_part1_home.setFont(font)
        self.buttom_part1_home.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/icon_Home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttom_part1_home.setIcon(icon)
        self.buttom_part1_home.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part1_home.setCheckable(False)
        self.buttom_part1_home.setAutoDefault(False)
        self.buttom_part1_home.setDefault(False)
        self.buttom_part1_home.setFlat(False)
        self.buttom_part1_home.setObjectName("buttom_part1_home")
        self.buttom_part1_home.setText("Home")
        self.buttom_part1_home.clicked.connect(self.buttom_part1_home_clicked)
        
        ## 建立讀取檔案按鈕 buttom_part1_read
        self.buttom_part1_read = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part1_read.setGeometry(QtCore.QRect(10, 80, 150, 60))
        self.buttom_part1_read.setFont(font)
        self.buttom_part1_read.setText("Open")
        self.buttom_part1_read.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/icon_read_file.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttom_part1_read.setIcon(icon)
        self.buttom_part1_read.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part1_read.clicked.connect(self.buttom_part1_read_clicked)
        
        ## 建立秀出圖片按鈕 buttom_part1_imgShow
        self.buttom_part1_imgShow = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part1_imgShow.setGeometry(QtCore.QRect(10, 150, 150, 60))
        self.buttom_part1_imgShow.setFont(font)
        self.buttom_part1_imgShow.setText("Show")
        self.buttom_part1_imgShow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/icon_imageShow.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttom_part1_imgShow.setIcon(icon)
        self.buttom_part1_imgShow.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part1_imgShow.clicked.connect(self.buttom_part1_imgShow_clicked)
        
        ## 建立TextBrowser: 顯示讀取的檔案資訊 TextBrowser_part1_file
        self.TextBrowser_part1_file = QtWidgets.QTextBrowser(self.centralwidget)
        self.TextBrowser_part1_file.setGeometry(QtCore.QRect(180, 10, 600, 60))
        self.TextBrowser_part1_file.setFont(font)
        self.TextBrowser_part1_file.setAlignment(QtCore.Qt.AlignCenter)
        
        ## 建立label 顯示histogram: label_part1_hist
        self.label_part1_hist = QtWidgets.QLabel(self.centralwidget)
        self.label_part1_hist.setGeometry(180, 90, 600, 250)
        self.label_part1_hist.setScaledContents(True)
        
        ## 建立label 顯示64檔輸出的影像: label_part1_image
        self.label_part1_image = QtWidgets.QLabel(self.centralwidget)
        self.label_part1_image.setGeometry(180, 360, 256, 256)
        self.label_part1_image.setScaledContents(True)
        
        
        # 建立part2 的畫面
        ## 建立回首頁的按鈕 buttom_part2_home
        self.buttom_part2_home = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part2_home.setGeometry(QtCore.QRect(10, 10, 150, 60))
        font = QtGui.QFont()
        self.buttom_part2_home.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/icon_Home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttom_part2_home.setIcon(icon)
        font.setFamily("Adobe Devanagari")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.buttom_part2_home.setFont(font)
        self.buttom_part2_home.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part2_home.setCheckable(False)
        self.buttom_part2_home.setAutoDefault(False)
        self.buttom_part2_home.setDefault(False)
        self.buttom_part2_home.setFlat(False)
        self.buttom_part2_home.setObjectName("buttom_part1_home")
        self.buttom_part2_home.setText("Home")
        self.buttom_part2_home.clicked.connect(self.buttom_part2_home_clicked)
        
        ## 創建 readme按鈕: buttom_part2_readme --> messageBox: 說明part 2的使用方式
        self.buttom_part2_readme = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part2_readme.setGeometry(QtCore.QRect(10, 80, 150, 60))
        self.buttom_part2_readme.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.buttom_part2_readme.setText("Read")
        font.setFamily("Adobe Devanagari")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.buttom_part2_readme.setFont(font)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("image/icon_readme.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttom_part2_readme.setIcon(icon2)
        self.buttom_part2_readme.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part2_readme.setCheckable(False)
        self.buttom_part2_readme.setAutoDefault(False)
        self.buttom_part2_readme.setDefault(False)
        self.buttom_part2_readme.setFlat(False)
        self.buttom_part2_readme.setObjectName("buttom_readme")
        self.buttom_part2_readme.clicked.connect(self.buttom_part2_readme_clicked)
        
        ## 建立讀取第一張照片：buttom_part2_read1
        self.buttom_part2_read1 = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part2_read1.setGeometry(QtCore.QRect(10, 150, 150, 60))
        self.buttom_part2_read1.setFont(font)
        self.buttom_part2_read1.setText("File 1")
        self.buttom_part2_read1.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/icon_read_file.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttom_part2_read1.setIcon(icon)
        self.buttom_part2_read1.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part2_read1.clicked.connect(self.buttom_part2_read1_clicked)
        
        ## 建立讀取第一張照片：buttom_part2_read2
        self.buttom_part2_read2 = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part2_read2.setGeometry(QtCore.QRect(10, 220, 150, 60))
        self.buttom_part2_read2.setFont(font)
        self.buttom_part2_read2.setText("File 2")
        self.buttom_part2_read2.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/icon_read_file.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttom_part2_read2.setIcon(icon)
        self.buttom_part2_read2.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part2_read2.clicked.connect(self.buttom_part2_read2_clicked)
        
        ## 建立TextBrowser: 顯示讀取的檔案資訊 TextBrowser_part2_file1
        self.TextBrowser_part2_file1 = QtWidgets.QTextBrowser(self.centralwidget)
        self.TextBrowser_part2_file1.setGeometry(QtCore.QRect(180, 10, 600, 60))
        self.TextBrowser_part2_file1.setFont(font)
        self.TextBrowser_part2_file1.setAlignment(QtCore.Qt.AlignCenter)
        
        ## 建立TextBrowser: 顯示讀取的檔案資訊 TextBrowser_part2_file2
        self.TextBrowser_part2_file2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.TextBrowser_part2_file2.setGeometry(QtCore.QRect(180, 80, 600, 60))
        self.TextBrowser_part2_file2.setFont(font)
        self.TextBrowser_part2_file2.setAlignment(QtCore.Qt.AlignCenter)
        
        ## 建立slider value顯示：lable_part2_slider_show
        self.lable_part2_slider_show = QtWidgets.QLabel(self.centralwidget)
        self.lable_part2_slider_show.setFont(font)
        self.constant = 0
        self.lable_part2_slider_show.setText('常數' + str(self.constant))# 第一次顯示
        self.lable_part2_slider_show.setGeometry(QtCore.QRect(10, 290, 150, 60))
        
        ## 建立slider: 運算常數的部分
        self.Slider_paer2_constant = QtWidgets.QSlider(QtCore.Qt.Horizontal, self.centralwidget)
        self.Slider_paer2_constant.setGeometry(QtCore.QRect(10, 360, 150, 30))
        self.Slider_paer2_constant.setRange(-255, 255) # 限制範圍在有意義的區間
        self.Slider_paer2_constant.setTickInterval(255)
        self.Slider_paer2_constant.valueChanged.connect(self.Slider_part2_value)
        
        ## 建立運算按鈕：buttom_part2_op1
        self.buttom_part2_op1 = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part2_op1.setGeometry(QtCore.QRect(180, 150, 60, 60))
        self.buttom_part2_op1.setText('1')
        self.buttom_part2_op1.setFont(font)
        self.buttom_part2_op1.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part2_op1.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.buttom_part2_op1.setCheckable(False)
        self.buttom_part2_op1.setAutoDefault(False)
        self.buttom_part2_op1.setDefault(False)
        self.buttom_part2_op1.setFlat(False)
        self.buttom_part2_op1.clicked.connect(self.buttom_part2_op1_clicked)
        
        ## 建立運算按鈕：buttom_part2_op2
        self.buttom_part2_op2 = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part2_op2.setGeometry(QtCore.QRect(250, 150, 60, 60))
        self.buttom_part2_op2.setText('2')
        self.buttom_part2_op2.setFont(font)
        self.buttom_part2_op2.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part2_op2.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.buttom_part2_op2.setCheckable(False)
        self.buttom_part2_op2.setAutoDefault(False)
        self.buttom_part2_op2.setDefault(False)
        self.buttom_part2_op2.setFlat(False)
        self.buttom_part2_op2.clicked.connect(self.buttom_part2_op2_clicked)
        
        ## 建立運算按鈕：buttom_part2_op3
        self.buttom_part2_op3 = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part2_op3.setGeometry(QtCore.QRect(320, 150, 60, 60))
        self.buttom_part2_op3.setText('3')
        self.buttom_part2_op3.setFont(font)
        self.buttom_part2_op3.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part2_op3.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.buttom_part2_op3.setCheckable(False)
        self.buttom_part2_op3.setAutoDefault(False)
        self.buttom_part2_op3.setDefault(False)
        self.buttom_part2_op3.setFlat(False)
        self.buttom_part2_op3.clicked.connect(self.buttom_part2_op3_clicked)
        
        ## 建立運算按鈕：buttom_part2_op4
        self.buttom_part2_op4 = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part2_op4.setGeometry(QtCore.QRect(390, 150, 60, 60))
        self.buttom_part2_op4.setText('4')
        self.buttom_part2_op4.setFont(font)
        self.buttom_part2_op4.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part2_op4.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.buttom_part2_op4.setCheckable(False)
        self.buttom_part2_op4.setAutoDefault(False)
        self.buttom_part2_op4.setDefault(False)
        self.buttom_part2_op4.setFlat(False)
        self.buttom_part2_op4.clicked.connect(self.buttom_part2_op4_clicked)
        
        ## 建立顯示按鈕：buttom_part2_Show
        self.buttom_part2_Show = QtWidgets.QPushButton(self.centralwidget)
        self.buttom_part2_Show.setGeometry(QtCore.QRect(460, 150, 320, 60))
        self.buttom_part2_Show.setFont(font)
        self.buttom_part2_Show.setText("Show")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/icon_imageShow.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttom_part2_Show.setIcon(icon)
        self.buttom_part2_Show.setIconSize(QtCore.QSize(50, 50))
        self.buttom_part2_Show.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.buttom_part2_Show.setCheckable(False)
        self.buttom_part2_Show.setAutoDefault(False)
        self.buttom_part2_Show.setDefault(False)
        self.buttom_part2_Show.setFlat(False)
        self.buttom_part2_Show.clicked.connect(self.buttom_part2_Show_clicked)     
        
        ## 建立label 顯示histogram: label_part2_hist1
        self.label_part2_hist1 = QtWidgets.QLabel(self.centralwidget)
        self.label_part2_hist1.setGeometry(180, 220, 600, 200)
        self.label_part2_hist1.setScaledContents(True)
        
        ## 建立label 顯示histogram: label_part2_hist2
        self.label_part2_hist2 = QtWidgets.QLabel(self.centralwidget)
        self.label_part2_hist2.setGeometry(180, 430, 600, 200)
        self.label_part2_hist2.setScaledContents(True)
        
        ## 建立label 顯示histogram: label_part2_hist3
        self.label_part2_hist3 = QtWidgets.QLabel(self.centralwidget)
        self.label_part2_hist3.setGeometry(180, 640, 600, 200)
        self.label_part2_hist3.setScaledContents(True)
        
        ## 建立label 顯示64檔輸出的影像: label_part2_image
        self.label_part2_image = QtWidgets.QLabel(self.centralwidget)
        self.label_part2_image.setGeometry(10, 400, 128, 128)
        self.label_part2_image.setScaledContents(True)
        
        # 起始畫面隱藏的部分(part 1, part 2)
        ## part1
        self.buttom_part1_home.setVisible(False)
        self.buttom_part1_imgShow.setVisible(False)
        self.buttom_part1_read.setVisible(False)
        self.TextBrowser_part1_file.setVisible(False)
        self.label_part1_hist.setVisible(False)
        self.label_part1_image.setVisible(False)
        
        ## part2
        self.buttom_part2_home.setVisible(False)
        self.buttom_part2_readme.setVisible(False)
        self.buttom_part2_read1.setVisible(False)
        self.buttom_part2_read2.setVisible(False)
        self.TextBrowser_part2_file1.setVisible(False)
        self.TextBrowser_part2_file2.setVisible(False)
        self.lable_part2_slider_show.setVisible(False)
        self.Slider_paer2_constant.setVisible(False)
        self.buttom_part2_op1.setVisible(False)
        self.buttom_part2_op2.setVisible(False)
        self.buttom_part2_op3.setVisible(False)
        self.buttom_part2_op4.setVisible(False)
        self.buttom_part2_Show.setVisible(False)
        self.label_part2_hist1.setVisible(False)
        self.label_part2_hist2.setVisible(False)
        self.label_part2_hist3.setVisible(False)
        self.label_part2_image.setVisible(False)
        
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate        
        MainWindow.setWindowTitle(_translate("MainWindow", "影像處理原理與應用"))
        self.buttom_part_1.setText(_translate("MainWindow", "Part 1"))
        self.buttom_part_2.setText(_translate("MainWindow", "Part 2"))
        self.label_creatorInfo.setText(_translate("MainWindow", "學生 林正浩(r11631029) 製作"))
        self.buttom_readme.setText(_translate("MainWindow", "Read me"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Adobe Devanagari\'; font-size:18pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'PMingLiU\';\">Part 1: Read the .64 file, draw a histogram and show the image.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'PMingLiU\';\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'PMingLiU\';\">Paer 2: Deel the Operation of image.</span></p></body></html>"))
        self.label_CourseName.setText(_translate("MainWindow", "影像處理原理與應用"))

        
    # 當按下 readme 會顯示使用說明 
    def buttom_readme_clicked(self):
        self.textBrowser.setVisible(True)
        self.buttom_readme.setEnabled(False)
        
    def buttom_part2_readme_clicked(self):
        readme4part2 = '1. file 1 為一個讀取.64。\n2. file 2 為讀取另一個.64。\n3. 按鈕1234分別處理題目運算。\n注意：按鈕124只能用file1的照片。\n5.Show顯示histogram和圖片\n6. Slider負責調整常數(-255~255)。' # part2 readme 內容
        reply = QtWidgets.QMessageBox.information(self.centralwidget, 'Readme for Part 2', readme4part2)
    
    # 當按下 button part1 會進入part1的使用介面    
    def buttom_part1_clicked(self):
        # 隱藏初始畫面的狀態
        self.label_CourseName.setVisible(False)
        self.label_creatorInfo.setVisible(False)
        self.buttom_part_1.setVisible(False)
        self.buttom_part_2.setVisible(False)
        self.buttom_readme.setVisible(False)
        self.textBrowser.setVisible(False)
        
        # 顯示part 1的畫面
        self.buttom_part1_home.setVisible(True)
        self.buttom_part1_imgShow.setVisible(True)
        self.buttom_part1_read.setVisible(True)
        # self.TextBrowser_part1_file.setVisible(True)  # TextBrowser 先隱藏，等到push read在使用
        # self.label_part1_hist.setVisible(True)
        # self.label_part1_image.setVisible(True)
    
    # 當按下 button part2 會進入part1的使用介面    
    def buttom_part2_clicked(self):
        # 隱藏初始畫面的狀態
        self.label_CourseName.setVisible(False)
        self.label_creatorInfo.setVisible(False)
        self.buttom_part_1.setVisible(False)
        self.buttom_part_2.setVisible(False)
        self.buttom_readme.setVisible(False)
        self.textBrowser.setVisible(False)
        
        # 顯示part 2的畫面
        self.buttom_part2_home.setVisible(True)
        self.buttom_part2_readme.setVisible(True)
        self.buttom_part2_read1.setVisible(True)
        self.buttom_part2_read2.setVisible(True)
        self.lable_part2_slider_show.setVisible(True)
        self.Slider_paer2_constant.setVisible(True)
        self.TextBrowser_part2_file1.setVisible(True)
        self.TextBrowser_part2_file2.setVisible(True)
        self.buttom_part2_op1.setVisible(True)
        self.buttom_part2_op2.setVisible(True)
        self.buttom_part2_op3.setVisible(True)
        self.buttom_part2_op4.setVisible(True)
        self.buttom_part2_Show.setVisible(True)
        
        
    def buttom_part1_home_clicked(self):
        # 顯示初始畫面的狀態
        self.label_CourseName.setVisible(True)
        self.label_creatorInfo.setVisible(True)
        self.buttom_part_1.setVisible(True)
        self.buttom_part_2.setVisible(True)
        self.buttom_readme.setVisible(True)
        
        ## readme 初始化--> 按鈕啟用、textBrowser隱藏
        self.buttom_readme.setEnabled(True)
        self.textBrowser.setVisible(False)
        
        # 隱藏part 1的畫面
        self.buttom_part1_home.setVisible(False)
        self.buttom_part1_imgShow.setVisible(False)
        self.buttom_part1_read.setVisible(False)
        self.TextBrowser_part1_file.setVisible(False)
        self.label_part1_hist.setVisible(False)
        self.label_part1_image.setVisible(False)
        
    def buttom_part2_home_clicked(self):
        # 顯示初始畫面的狀態
        self.label_CourseName.setVisible(True)
        self.label_creatorInfo.setVisible(True)
        self.buttom_part_1.setVisible(True)
        self.buttom_part_2.setVisible(True)
        self.buttom_readme.setVisible(True)
        
        ## readme 初始化--> 按鈕啟用、textBrowser隱藏
        self.buttom_readme.setEnabled(True)
        self.textBrowser.setVisible(False)
        self.constant = 0
        
        # 隱藏part 2的畫面
        self.buttom_part2_home.setVisible(False)
        self.buttom_part2_readme.setVisible(False)
        self.buttom_part2_read1.setVisible(False)
        self.buttom_part2_read2.setVisible(False)
        self.TextBrowser_part2_file1.setVisible(False)
        self.TextBrowser_part2_file1.setText('')
        self.TextBrowser_part2_file2.setVisible(False)
        self.TextBrowser_part2_file2.setText('')
        self.lable_part2_slider_show.setVisible(False)
        self.lable_part2_slider_show.setText('常數0')
        self.Slider_paer2_constant.setVisible(False)
        self.buttom_part2_op1.setVisible(False)
        self.buttom_part2_op2.setVisible(False)
        self.buttom_part2_op3.setVisible(False)
        self.buttom_part2_op4.setVisible(False)
        self.buttom_part2_Show.setVisible(False)
        self.label_part2_hist1.setVisible(False)
        self.label_part2_hist2.setVisible(False)
        self.label_part2_hist3.setVisible(False)
        self.label_part2_image.setVisible(False)
                     
    def buttom_part1_read_clicked(self):
        # self.del_old_hist()
        try:
            file_path, file_type = QtWidgets.QFileDialog.getOpenFileName()
            self.TextBrowser_part1_file.setVisible(True)
            self.label_part1_hist.setVisible(True)
            self.TextBrowser_part1_file.setText("讀取檔案：" + file_path)
            self.dot64_deal.main(file_path) # text 存在contant 中
            self.label_part1_hist.setPixmap(QtGui.QPixmap("log/part1_histogram.png"))
        except:
            readme4part2 = '請讀取檔案' 
            reply = QtWidgets.QMessageBox.information(self.centralwidget, 'ERROR', readme4part2)
                        
    def buttom_part2_read1_clicked(self):
        try:
            # self.del_old_hist()
            self.part2_file_path1, file_type = QtWidgets.QFileDialog.getOpenFileName()
            # self.label_part2_hist.setVisible(True)
            self.TextBrowser_part2_file1.setText("讀取檔案：" + self.part2_file_path1)
            
            # 建立 物件
            self.part2_file1 = Dot64_part2(filepath = self.part2_file_path1)
            self.part2_array1 = self.part2_file1.read64() # 原矩陣
            
            # 先將原本的histogram save
            saveName = 'part2_histogram_o1.png'
            self.part2_histogram(self.part2_array1, saveName)
        except:
            readme4part2 = '請讀取檔案' 
            reply = QtWidgets.QMessageBox.information(self.centralwidget, 'ERROR', readme4part2)
             
    def buttom_part2_read2_clicked(self):
        try:
            # self.del_old_hist()
            self.part2_file_path2, file_type = QtWidgets.QFileDialog.getOpenFileName()
            # self.label_part2_hist.setVisible(True)
            self.TextBrowser_part2_file2.setText("讀取檔案：" + self.part2_file_path2)
            
            # 建立物件
            self.part2_file2 = Dot64_part2(filepath = self.part2_file_path2)
            self.part2_array2 = self.part2_file2.read64() # 原矩陣
            
            # 先將原本的histogram save
            saveName = 'part2_histogram_o2.png'
            self.part2_histogram(self.part2_array2, saveName)
        except:
            readme4part2 = '請讀取檔案' 
            reply = QtWidgets.QMessageBox.information(self.centralwidget, 'ERROR', readme4part2)
        
    # 讀取Slider的數值
    def Slider_part2_value(self):
        self.constant =  self.Slider_paer2_constant.value()
        self.lable_part2_slider_show.setText('常數' + str(self.constant)) 
        
    
    def buttom_part1_imgShow_clicked(self):
        self.label_part1_image.setVisible(True)
        self.label_part1_image.setPixmap(QtGui.QPixmap("log/part1_image.png"))
    
    # 顯示直方圖跟圖像
    def buttom_part2_Show_clicked(self):
        self.label_part2_image.setVisible(True)
        self.label_part2_image.setPixmap(QtGui.QPixmap("log/part2_image.png"))
        
    # 運算按鈕clicked
    def buttom_part2_op1_clicked(self):
        try:
            # 建立物件 self.part2_op_file1: 給OP用
            self.part2_op_file1 = Dot64_part2(filepath = self.part2_file_path1)
            self.part2_op_array1 =  self.part2_op_file1.read64() # 原矩陣
            
            op1_result = self.op1(self.part2_op_array1, self.constant)
            self.part2_save(op1_result, 'part2_histogram.png')
            
            self.label_part2_hist1.setVisible(True)
            self.label_part2_hist2.setVisible(True)
            self.label_part2_hist3.setVisible(False)
            self.label_part2_hist1.setPixmap(QtGui.QPixmap("log/part2_histogram_o1.png"))
            self.label_part2_hist2.setPixmap(QtGui.QPixmap("log/part2_histogram.png"))
        except:
            readme4part2 = '運算錯誤，請重新確認file1是否選取' 
            reply = QtWidgets.QMessageBox.information(self.centralwidget, 'ERROR', readme4part2)
        
    def buttom_part2_op2_clicked(self):
        try:
            # 建立物件 self.part2_op_file1: 給OP用
            self.part2_op_file1 = Dot64_part2(filepath = self.part2_file_path1)
            self.part2_op_array1 =  self.part2_op_file1.read64() # 原矩陣
            
            op2_result = self.op2(self.part2_op_array1, self.constant)
            self.part2_save(op2_result, 'part2_histogram.png')
            
            self.label_part2_hist1.setVisible(True)
            self.label_part2_hist2.setVisible(True)
            self.label_part2_hist3.setVisible(False)
            self.label_part2_hist1.setPixmap(QtGui.QPixmap("log/part2_histogram_o1.png"))
            self.label_part2_hist2.setPixmap(QtGui.QPixmap("log/part2_histogram.png"))
        except:
            readme4part2 = '運算錯誤，請重新確認file1是否選取' 
            reply = QtWidgets.QMessageBox.information(self.centralwidget, 'ERROR', readme4part2)
        
    def buttom_part2_op3_clicked(self):
        try:
            # 建立物件 self.part2_op_file1: 給OP用
            self.part2_op_file1 = Dot64_part2(filepath = self.part2_file_path1)
            self.part2_op_array1 =  self.part2_op_file1.read64() # 原矩陣
            # 建立物件 self.part2_op_file2: 給OP用
            self.part2_op_file2 = Dot64_part2(filepath = self.part2_file_path2)
            self.part2_op_array2 =  self.part2_op_file2.read64() # 原矩陣
            
            
            op3_result = self.op3(self.part2_op_array1, self.part2_op_array2)
            self.part2_save(op3_result, 'part2_histogram.png')
            
            self.label_part2_hist1.setVisible(True)
            self.label_part2_hist2.setVisible(True)
            self.label_part2_hist3.setVisible(True)
            self.label_part2_hist1.setPixmap(QtGui.QPixmap("log/part2_histogram_o1.png"))
            self.label_part2_hist2.setPixmap(QtGui.QPixmap("log/part2_histogram_o2.png"))
            self.label_part2_hist3.setPixmap(QtGui.QPixmap("log/part2_histogram.png"))
        except:
            readme4part2 = '運算錯誤，請重新確認file1, file2是否選取' 
            reply = QtWidgets.QMessageBox.information(self.centralwidget, 'ERROR', readme4part2)
    
    def buttom_part2_op4_clicked(self):
        try:
            # 建立物件 self.part2_op_file1: 給OP用
            self.part2_op_file1 = Dot64_part2(filepath = self.part2_file_path1)
            self.part2_op_array1 =  self.part2_op_file1.read64() # 原矩陣
            
            op4_result = self.op4(self.part2_op_array1)
            self.part2_save(op4_result, 'part2_histogram.png')
            
            self.label_part2_hist1.setVisible(True)
            self.label_part2_hist2.setVisible(True)
            self.label_part2_hist3.setVisible(False)
            self.label_part2_hist1.setPixmap(QtGui.QPixmap("log/part2_histogram_o1.png"))
            self.label_part2_hist2.setPixmap(QtGui.QPixmap("log/part2_histogram.png"))
        except:
            readme4part2 = '運算錯誤，請重新確認file1是否選取' 
            reply = QtWidgets.QMessageBox.information(self.centralwidget, 'ERROR', readme4part2)
        
    # Part 2 運算用的4個method
    ## 運算1：影片加減一個常數-->調整明暗
    def op1(self, Array1, constant):
        h, w = Array1.shape
        for i in range(h):
            for j in range(w):
                value = Array1[i][j] + constant
                if(value > 255):
                    Array1[i][j] = 255
                elif(value < 0):
                    Array1[i][j] = 0
                else:
                    Array1[i][j] = round(value)
        return Array1              

    ## 運算2：乘上一個常數
    def op2(self, Array2, constant):
        h, w = Array2.shape
        for i in range(h):
            for j in range(w):
                value = Array2[i][j] * constant
                if(value > 255):
                    Array2[i][j] = 255
                elif(value < 0):
                    Array2[i][j] = 0
                else:
                    Array2[i][j] = round(value)
        return Array2 

    ## 運算3：兩矩陣平均
    def op3(self, Array1, Array2):
        Array = np.round((Array1 + Array2) / 2.)
        return Array 

    ## 運算4：f(x,y) - f(x-1,y)
    def op4(self, Array4):
        h, w = Array4.shape
        for i in range(1, h):
            for j in range(w):
                value = Array4[i][j] - Array4[i - 1][j]
                if(value > 255):
                    Array4[i][j] = 255
                elif(value < 0):
                    Array4[i][j] = 0
                else:
                    Array4[i][j] = round(value)
        return Array4
    
    def part2_save(self, array, saveName):
        self.part2_imgsave(array)
        self.part2_histogram(array, saveName)
        
    ## part2 將圖片儲存以便讀取  
    def part2_imgsave(self, a):
        img = a / 1.
        cv2.imwrite('log/part2_image.png', img)   

    ## part2 hist //part2_histogram.png
    def part2_histogram(self, array, saveName):
        L = [] # 將 array 轉變為 1D
        h, w = array.shape
        for i in range(h):
            for j in range(w):
                L.append(array[i][j])        
                
        l = [] # 存放統計資料
        for i in range(256):
            count =0
            for j in L:
                if(i == j):
                    count += 1
            l.append(count)
            
        plt.bar(list(range(256)), l)
        plt.savefig('log/'+ saveName)
        plt.close()

        
# 檢查log檔案
def check_log():
    import os
    dir = os.listdir()
    if("log" not in dir):
        os.system("mkdir log")

if __name__ == "__main__":
    import sys
    check_log()
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
