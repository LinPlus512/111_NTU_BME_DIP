# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import cv2
import numpy as np
from PyQt6 import QtCore, QtGui, QtWidgets
import os
import sys
import time

class Ui_mainwindow(object):
    def setupUi(self, mainwindow):
        mainwindow.setObjectName("mainwindow")
        mainwindow.resize(1920, 1000)
        self.button_openfile = QtWidgets.QPushButton(mainwindow)
        self.button_openfile.setGeometry(QtCore.QRect(10, 10, 150, 60))
        self.button_openfile.setObjectName("button_openfile")

        self.button_openfile.clicked.connect(self.button_open_file_clicked)
        self.button_FFTandIFFT = QtWidgets.QPushButton(mainwindow)
        self.button_FFTandIFFT.setGeometry(QtCore.QRect(10, 80, 150, 60))
        self.button_FFTandIFFT.setObjectName("button_FFTandIFFT")
        self.button_FFTandIFFT.clicked.connect(self.button_FTandIFT_clicked)

        self.button_idealLow = QtWidgets.QPushButton(mainwindow)
        self.button_idealLow.setGeometry(QtCore.QRect(10, 150, 150, 60))
        self.button_idealLow.setObjectName("button_idealLow")
        self.button_idealLow.clicked.connect(self.button_idealLow_clicked)

        self.button_idealHigh = QtWidgets.QPushButton(mainwindow)
        self.button_idealHigh.setGeometry(QtCore.QRect(10, 220, 150, 60))
        self.button_idealHigh.setObjectName("button_idealHigh")
        self.button_idealHigh.clicked.connect(self.button_idealHigh_clicked)

        self.button_GaussianLow = QtWidgets.QPushButton(mainwindow)
        self.button_GaussianLow.setGeometry(QtCore.QRect(10, 290, 150, 60))
        self.button_GaussianLow.setObjectName("button_GaussianLow")
        self.button_GaussianLow.clicked.connect(self.button_gaussianLow_clicked)

        self.button_GaussianHigh = QtWidgets.QPushButton(mainwindow)
        self.button_GaussianHigh.setGeometry(QtCore.QRect(10, 360, 150, 60))
        self.button_GaussianHigh.setObjectName("button_GaussianHigh")
        self.button_GaussianHigh.clicked.connect(self.button_gaussianHigh_clicked)

        self.button_ButterworthLow = QtWidgets.QPushButton(mainwindow)
        self.button_ButterworthLow.setGeometry(QtCore.QRect(10, 430, 150, 60))
        self.button_ButterworthLow.setObjectName("button_ButterworthLow")
        self.button_ButterworthLow.clicked.connect(self.button_butterworthLow_clicked)

        self.button_ButterworthHigh = QtWidgets.QPushButton(mainwindow)
        self.button_ButterworthHigh.setGeometry(QtCore.QRect(10, 500, 150, 60))
        self.button_ButterworthHigh.setObjectName("button_ButterworthHigh")
        self.button_ButterworthHigh.clicked.connect(self.button_butterworthHigh_clicked)

        self.lineEdit_gammaH = QtWidgets.QLineEdit(mainwindow)
        self.lineEdit_gammaH.setGeometry(QtCore.QRect(260, 10, 100, 20))
        self.lineEdit_gammaH.setObjectName("lineEdit_gammaH")

        self.label_gammaH = QtWidgets.QLabel(mainwindow)
        self.label_gammaH.setGeometry(QtCore.QRect(170, 10, 80, 20))
        self.label_gammaH.setObjectName("label_gammaH")

        self.lineEdit_gammaL = QtWidgets.QLineEdit(mainwindow)
        self.lineEdit_gammaL.setGeometry(QtCore.QRect(260, 50, 100, 20))
        self.lineEdit_gammaL.setObjectName("lineEdit_gammaL")

        self.label_gammaL = QtWidgets.QLabel(mainwindow)
        self.label_gammaL.setGeometry(QtCore.QRect(170, 50, 80, 20))
        self.label_gammaL.setObjectName("label_gammaL")

        self.lineEdit_D0 = QtWidgets.QLineEdit(mainwindow)
        self.lineEdit_D0.setGeometry(QtCore.QRect(260, 90, 100, 20))
        self.lineEdit_D0.setObjectName("lineEdit_D0")

        self.label_D0 = QtWidgets.QLabel(mainwindow)
        self.label_D0.setGeometry(QtCore.QRect(170, 90, 80, 20))
        self.label_D0.setObjectName("label_D0")

        self.button_Homomorphic = QtWidgets.QPushButton(mainwindow)
        self.button_Homomorphic.setGeometry(QtCore.QRect(10, 570, 150, 60))
        self.button_Homomorphic.setObjectName("button_Homomorphic")
        self.button_Homomorphic.clicked.connect(self.button_Homomorphic_clicked)

        self.button_motion = QtWidgets.QPushButton(mainwindow)
        self.button_motion.setGeometry(QtCore.QRect(10, 640, 150, 60))
        self.button_motion.setObjectName("button_motion")
        self.button_motion.clicked.connect(self.button_motion_clicked)

        self.button_MotionandNoise = QtWidgets.QPushButton(mainwindow)
        self.button_MotionandNoise.setGeometry(QtCore.QRect(10, 710, 150, 60))
        self.button_MotionandNoise.setObjectName("button_MotionandNoise")
        self.button_MotionandNoise.clicked.connect(self.button_MotionandNoise_clicked)

        self.label_photo_1 = QtWidgets.QLabel(mainwindow)
        self.label_photo_1.setGeometry(QtCore.QRect(450, 10, 256, 256))
        self.label_photo_1.setObjectName("label_photo_1")
        self.label_photo_2 = QtWidgets.QLabel(mainwindow)
        self.label_photo_2.setGeometry(QtCore.QRect(450, 276, 256, 256))
        self.label_photo_2.setObjectName("label_photo_2")
        self.label_photo_3 = QtWidgets.QLabel(mainwindow)
        self.label_photo_3.setGeometry(QtCore.QRect(716, 10, 256, 256))
        self.label_photo_3.setObjectName("label_photo_3")
        self.label_photo_4 = QtWidgets.QLabel(mainwindow)
        self.label_photo_4.setGeometry(QtCore.QRect(716, 276, 256, 256))
        self.label_photo_4.setObjectName("label_photo_4")
        self.label_originfig = QtWidgets.QLabel(mainwindow)
        self.label_originfig.setGeometry(QtCore.QRect(170, 130, 128, 128))
        self.label_originfig.setObjectName("label_originfig")

        self.label_result_explain = QtWidgets.QLabel(mainwindow)
        self.label_result_explain.setGeometry(QtCore.QRect(450, 500, 500, 300))

        self.retranslateUi(mainwindow)
        QtCore.QMetaObject.connectSlotsByName(mainwindow)

    def retranslateUi(self, mainwindow):
        _translate = QtCore.QCoreApplication.translate
        mainwindow.setWindowTitle(_translate("mainwindow", "R11631029林正浩"))
        self.button_openfile.setText(_translate("mainwindow", "Open File"))
        self.button_FFTandIFFT.setText(_translate("mainwindow", "FFT and IFFT"))
        self.button_idealLow.setText(_translate("mainwindow", "Ideal Low"))
        self.button_idealHigh.setText(_translate("mainwindow", "Ideal High"))
        self.button_GaussianLow.setText(_translate("mainwindow", "Gaussian Low"))
        self.button_GaussianHigh.setText(_translate("mainwindow", "Gaussian High"))
        self.button_ButterworthLow.setText(_translate("mainwindow", "Butterworth Low"))
        self.button_ButterworthHigh.setText(_translate("mainwindow", "Butterworth High"))
        self.label_gammaH.setText(_translate("mainwindow", "gammaH"))
        self.label_gammaL.setText(_translate("mainwindow", "gammaL"))
        self.label_D0.setText(_translate("mainwindow", "D0"))
        self.button_Homomorphic.setText(_translate("mainwindow", "Homomorphic"))
        self.button_motion.setText(_translate("mainwindow", "Motion blur"))
        self.button_MotionandNoise.setText(_translate("mainwindow", "Motion+Noise"))
        self.label_photo_1.setText(_translate("mainwindow", ""))
        self.label_photo_2.setText(_translate("mainwindow", ""))
        self.label_photo_3.setText(_translate("mainwindow", ""))
        self.label_photo_4.setText(_translate("mainwindow", ""))
        self.label_originfig.setText(_translate("mainwindow", ""))
    
    
    #<-- button read image clicked -->#
    def button_open_file_clicked(self):
        try:
            self.image_path, ret= QtWidgets.QFileDialog.getOpenFileName()
            self.im = cv2.imread(self.image_path, cv2.IMREAD_GRAYSCALE) # 灰階

            self.label_originfig.setPixmap(QtGui.QPixmap(self.image_path))
            self.label_originfig.setScaledContents(True)
            # print(image_path) 
        except:
            Error_Text = '請重新讀檔，並確認路徑不存在奇怪字元（ex:中文）'
            QtWidgets.QMessageBox.information(None, 'Read Me', Error_Text)

    #<-- button FT and IFT clicked -->#
    def button_FTandIFT_clicked(self):
        start_time = time.time()
        F, Spectrum, phase_angle = FT(self.im)
        print('The time of fourier transform(s) --> ', time.time() - start_time)
        img_FIT = FIT(F)
        compare = self.im - img_FIT
        cv2.imwrite('log/part1_fourier_spectrum.jpg', Spectrum)
        cv2.imwrite('log/part1_fourier_phase_angle.jpg', (phase_angle - np.min(phase_angle)) / np.max(phase_angle) * 255)
        cv2.imwrite('log/part1_compare.jpg', (compare - np.min(compare)) / np.max(compare) * 255)
        cv2.imwrite('log/part1_after_FIT.jpg', img_FIT)
        self.label_photo_1.setPixmap(QtGui.QPixmap('log/part1_fourier_spectrum.jpg'))
        self.label_photo_1.setScaledContents(True)
        self.label_photo_2.setPixmap(QtGui.QPixmap('log/part1_fourier_phase_angle.jpg'))
        self.label_photo_2.setScaledContents(True)
        self.label_photo_3.setPixmap(QtGui.QPixmap('log/part1_compare.jpg'))
        self.label_photo_3.setScaledContents(True)
        self.label_photo_4.setPixmap(QtGui.QPixmap('log/part1_after_FIT.jpg'))
        self.label_photo_4.setScaledContents(True)
        text = '左上：頻譜圖\n左下：相角圖\n右上：原圖和反傅立葉後的差異\n右下：經傅立葉再反傅立葉後'
        self.label_result_explain.setText(text)
    #<-- button ideal Low clicked -->#
    def button_idealLow_clicked(self):
        D0 = int(self.lineEdit_D0.text())
        self.lineEdit_D0.clear()
        img, spectrum = ideal_Pass(self.im, D0, 'Low')
        cv2.imwrite('log/part2_ideal_Low_img.jpg', img)
        cv2.imwrite('log/part2_ideal_Low_spectrum.jpg', spectrum)
        self.label_photo_1.setPixmap(QtGui.QPixmap('log/part2_ideal_Low_img.jpg'))
        self.label_photo_1.setScaledContents(True)
        self.label_photo_2.setPixmap(QtGui.QPixmap('log/part2_ideal_Low_spectrum.jpg'))
        self.label_photo_2.setScaledContents(True)
        # self.label_photo_3.setPixmap(QtGui.QPixmap('log/part1_compare.jpg'))
        # self.label_photo_3.setScaledContents(True)
        # self.label_photo_4.setPixmap(QtGui.QPixmap('log/part1_after_FIT.jpg'))
        # self.label_photo_4.setScaledContents(True)
        self.label_photo_3.clear()
        self.label_photo_4.clear()
        text = '上：轉換後\n下：頻譜圖'
        self.label_result_explain.setText(text)

   
    #<-- button ideal High clicked -->#
    def button_idealHigh_clicked(self):
        D0 = int(self.lineEdit_D0.text())
        self.lineEdit_D0.clear()
        img, spectrum = ideal_Pass(self.im, D0, 'High')
        cv2.imwrite('log/part2_ideal_High_img.jpg', img)
        cv2.imwrite('log/part2_ideal_High_spectrum.jpg', spectrum)
        self.label_photo_1.setPixmap(QtGui.QPixmap('log/part2_ideal_High_img.jpg'))
        self.label_photo_1.setScaledContents(True)
        self.label_photo_2.setPixmap(QtGui.QPixmap('log/part2_ideal_High_spectrum.jpg'))
        self.label_photo_2.setScaledContents(True)
        # self.label_photo_3.setPixmap(QtGui.QPixmap('log/part1_compare.jpg'))
        # self.label_photo_3.setScaledContents(True)
        # self.label_photo_4.setPixmap(QtGui.QPixmap('log/part1_after_FIT.jpg'))
        # self.label_photo_4.setScaledContents(True)
        self.label_photo_3.clear()
        self.label_photo_4.clear()
        text = '上：轉換後\n下：頻譜圖'
        self.label_result_explain.setText(text)

    #<-- button gaussian Low clicked -->#
    def button_gaussianLow_clicked(self):
        D0 = int(self.lineEdit_D0.text())
        self.lineEdit_D0.clear()
        img, spectrum = gaussian_pass(self.im, D0, 'Low')
        cv2.imwrite('log/part2_gaussian_Low_img.jpg', img)
        cv2.imwrite('log/part2_gaussian_Low_spectrum.jpg', spectrum)
        self.label_photo_1.setPixmap(QtGui.QPixmap('log/part2_gaussian_Low_img.jpg'))
        self.label_photo_1.setScaledContents(True)
        self.label_photo_2.setPixmap(QtGui.QPixmap('log/part2_gaussian_Low_spectrum.jpg'))
        self.label_photo_2.setScaledContents(True)
        # self.label_photo_3.setPixmap(QtGui.QPixmap('log/part1_compare.jpg'))
        # self.label_photo_3.setScaledContents(True)
        # self.label_photo_4.setPixmap(QtGui.QPixmap('log/part1_after_FIT.jpg'))
        # self.label_photo_4.setScaledContents(True)
        self.label_photo_3.clear()
        self.label_photo_4.clear()
        text = '上：轉換後\n下：頻譜圖'
        self.label_result_explain.setText(text)

    #<-- button gaussian High clicked -->#
    def button_gaussianHigh_clicked(self):
        D0 = int(self.lineEdit_D0.text())
        self.lineEdit_D0.clear()
        img, spectrum = gaussian_pass(self.im, D0, 'High')
        cv2.imwrite('log/part2_gaussian_High_img.jpg', img)
        cv2.imwrite('log/part2_gaussian_High_spectrum.jpg', spectrum)
        self.label_photo_1.setPixmap(QtGui.QPixmap('log/part2_gaussian_High_img.jpg'))
        self.label_photo_1.setScaledContents(True)
        self.label_photo_2.setPixmap(QtGui.QPixmap('log/part2_gaussian_High_spectrum.jpg'))
        self.label_photo_2.setScaledContents(True)
        # self.label_photo_3.setPixmap(QtGui.QPixmap('log/part1_compare.jpg'))
        # self.label_photo_3.setScaledContents(True)
        # self.label_photo_4.setPixmap(QtGui.QPixmap('log/part1_after_FIT.jpg'))
        # self.label_photo_4.setScaledContents(True)
        self.label_photo_3.clear()
        self.label_photo_4.clear()
        text = '上：轉換後\n下：頻譜圖'
        self.label_result_explain.setText(text)

    #<-- button butterworth Low clicked -->#
    def button_butterworthLow_clicked(self):
        D0 = int(self.lineEdit_D0.text())
        self.lineEdit_D0.clear()
        img, spectrum = butterworth_pass(self.im, D0, 5, 'Low')
        cv2.imwrite('log/part2_butterworth_Low_img.jpg', img)
        cv2.imwrite('log/part2_butterworth_Low_spectrum.jpg', spectrum)
        self.label_photo_1.setPixmap(QtGui.QPixmap('log/part2_butterworth_Low_img.jpg'))
        self.label_photo_1.setScaledContents(True)
        self.label_photo_2.setPixmap(QtGui.QPixmap('log/part2_butterworth_Low_spectrum.jpg'))
        self.label_photo_2.setScaledContents(True)
        # self.label_photo_3.setPixmap(QtGui.QPixmap('log/part1_compare.jpg'))
        # self.label_photo_3.setScaledContents(True)
        # self.label_photo_4.setPixmap(QtGui.QPixmap('log/part1_after_FIT.jpg'))
        # self.label_photo_4.setScaledContents(True)
        self.label_photo_3.clear()
        self.label_photo_4.clear()
        text = '上：轉換後\n下：頻譜圖\nButter Worth的次方數預設為5, 因為作者確診，無時間增設輸入鍵'
        self.label_result_explain.setText(text)

    #<-- button butterworth High clicked -->#
    def button_butterworthHigh_clicked(self):
        D0 = int(self.lineEdit_D0.text())
        self.lineEdit_D0.clear()
        img, spectrum = butterworth_pass(self.im, D0, 5, 'High')
        cv2.imwrite('log/part2_butterworth_High_img.jpg', img)
        cv2.imwrite('log/part2_butterworth_High_spectrum.jpg', spectrum)
        self.label_photo_1.setPixmap(QtGui.QPixmap('log/part2_butterworth_High_img.jpg'))
        self.label_photo_1.setScaledContents(True)
        self.label_photo_2.setPixmap(QtGui.QPixmap('log/part2_butterworth_High_spectrum.jpg'))
        self.label_photo_2.setScaledContents(True)
        # self.label_photo_3.setPixmap(QtGui.QPixmap('log/part1_compare.jpg'))
        # self.label_photo_3.setScaledContents(True)
        # self.label_photo_4.setPixmap(QtGui.QPixmap('log/part1_after_FIT.jpg'))
        # self.label_photo_4.setScaledContents(True)
        self.label_photo_3.clear()
        self.label_photo_4.clear()
        text = '上：轉換後\n下：頻譜圖\nButter Worth的次方數預設為5, 因為作者確診，無時間增設輸入鍵'
        self.label_result_explain.setText(text)
    
    #<-- button Homomorphic clicked -->#
    def button_Homomorphic_clicked(self):
        D0 = int(self.lineEdit_D0.text())
        gammaH = float(self.lineEdit_gammaH.text())
        gammaL = float(self.lineEdit_gammaL.text())
        self.lineEdit_D0.clear()
        self.lineEdit_gammaH.clear()
        self.lineEdit_gammaL.clear()
        img, spectrum = homomorphic(self.im, gammaH, gammaL, D0, 1)
        cv2.imwrite('log/part3_Homomorphic_img.jpg', (img - np.min(img)) / np.max(img) * 255)
        cv2.imwrite('log/part3_Homomorphic_spectrum.jpg', spectrum)

        self.label_photo_1.setPixmap(QtGui.QPixmap('log/part3_Homomorphic_img.jpg'))
        self.label_photo_1.setScaledContents(True)
        self.label_photo_2.setPixmap(QtGui.QPixmap('log/part3_Homomorphic_spectrum.jpg'))
        self.label_photo_2.setScaledContents(True)
        # self.label_photo_3.setPixmap(QtGui.QPixmap('log/part1_compare.jpg'))
        # self.label_photo_3.setScaledContents(True)
        # self.label_photo_4.setPixmap(QtGui.QPixmap('log/part1_after_FIT.jpg'))
        # self.label_photo_4.setScaledContents(True)
        self.label_photo_3.clear()
        self.label_photo_4.clear()

        text = '上：轉換後\n下：頻譜圖\nc預設為1, 因為作業並未要求c作為輸入的一方'
        self.label_result_explain.setText(text)
    
    #<-- button motion clicked -->#
    def button_motion_clicked(self):
        img, img_after_inverse, img_after_wiener = motion_blured(self.im, 0, 1, 0.1, 0.1, 0.0005)
        compare = img_after_inverse - img_after_wiener
        cv2.imwrite('log/part4_motion_img.jpg', (img - np.min(img)) / np.max(img) * 255)
        cv2.imwrite('log/part4_motion_inverse.jpg', (img_after_inverse - np.min(img_after_inverse)) / np.max(img_after_inverse) * 255)
        cv2.imwrite('log/part4_motion_wiener.jpg', (img_after_wiener - np.min(img_after_wiener)) / np.max(img_after_wiener) * 255)
        cv2.imwrite('log/part4_motion_compare.jpg', (compare - np.min(compare)) / np.max(compare) * 255)
        self.label_photo_1.setPixmap(QtGui.QPixmap('log/part4_motion_img.jpg'))
        self.label_photo_1.setScaledContents(True)
        self.label_photo_2.setPixmap(QtGui.QPixmap('log/part4_motion_inverse.jpg'))
        self.label_photo_2.setScaledContents(True)
        self.label_photo_3.setPixmap(QtGui.QPixmap('log/part4_motion_wiener.jpg'))
        self.label_photo_3.setScaledContents(True)
        self.label_photo_4.setPixmap(QtGui.QPixmap('log/part4_motion_compare.jpg'))
        self.label_photo_4.setScaledContents(True)
        text = '左上：干擾後\n左下：After inverse\n右上：compara with inverse and wiener\n右下：After wiener\n移動的參數均參照課本圖5-26及作業題目指定'
        self.label_result_explain.setText(text)
    
    
    #<-- button motion and noise clicked -->#
    def button_MotionandNoise_clicked(self):
        img, img_after_inverse, img_after_wiener = motion_blured(self.im, 1, 1, 0.1, 0.1, 0.0005)
        compare = img_after_inverse - img_after_wiener
        cv2.imwrite('log/part4_motion_img.jpg', (img - np.min(img)) / np.max(img) * 255)
        cv2.imwrite('log/part4_motion_inverse.jpg', (img_after_inverse - np.min(img_after_inverse)) / np.max(img_after_inverse) * 255)
        cv2.imwrite('log/part4_motion_wiener.jpg', (img_after_wiener - np.min(img_after_wiener)) / np.max(img_after_wiener) * 255)
        cv2.imwrite('log/part4_motion_compare.jpg', (compare - np.min(compare)) / np.max(compare) * 255)
        self.label_photo_1.setPixmap(QtGui.QPixmap('log/part4_motion_img.jpg'))
        self.label_photo_1.setScaledContents(True)
        self.label_photo_2.setPixmap(QtGui.QPixmap('log/part4_motion_inverse.jpg'))
        self.label_photo_2.setScaledContents(True)
        self.label_photo_3.setPixmap(QtGui.QPixmap('log/part4_motion_wiener.jpg'))
        self.label_photo_3.setScaledContents(True)
        self.label_photo_4.setPixmap(QtGui.QPixmap('log/part4_motion_compare.jpg'))
        self.label_photo_4.setScaledContents(True)
        text = '左上：干擾後\n左下：After inverse\n右上：compara with inverse and wiener\n右下：After wiener\n移動的參數均參照課本圖5-26及作業題目指定'
        self.label_result_explain.setText(text)
# FT
def FT(Gray_img):
    f = np.fft.fft2(Gray_img) # fourier transform
    f_shift = np.fft.fftshift(f) # shift origin point
    magnitude_spectrum = 20 * np.log(1 + np.abs(f_shift)) # show specturm photo
    phase_angle = np.angle(f_shift) # show phase angle fig
    return f_shift, magnitude_spectrum, phase_angle # 平移後的fourier transform, 頻譜圖, 相角圖

# IFT
def FIT(sample_after_FT):
    f_ishift = np.fft.ifftshift(sample_after_FT) # shift again for one shift when has run FT.
    img_back = np.fft.ifft2(f_ishift) # fourier inverse transform
    img_back = np.abs(img_back) # show image of FIT
    return img_back # fourier 逆轉換後的照片

# ideal_pass(gray_img, radius, Low or High)
def ideal_Pass(img_gray, radius, Type): # ideal Lowpass, 設定一個頻率域的threshhold, 去進行保留或去除
    # set parameter
    h, w = img_gray.shape
    center_X = h/2
    center_Y = w/2
    R = radius

    # Fourier Transform
    fft_Shift, magnitude_spectrum, phase_angle = FT(img_gray)

    # Run ideal pass --> classify Low or High
    if (Type == 'Low'):
        for i in range(h):
            for j in range(w):
                if ((i - center_X)**2 + (j - center_Y)**2 > R**2):
                    fft_Shift[i, j] = 0
    else:
        for i in range(h):
            for j in range(w):
                if ((i - center_X)**2 + (j - center_Y)**2 < R**2):
                    fft_Shift[i, j] = 0

    # Fourier inverse transform
    img = FIT(fft_Shift)

    # spectrum
    specturm = 20 * np.log(1 + np.abs(fft_Shift))

    return img, specturm

# gaussian filter
def gaussian_pass(img_gray, D0, Type):
    # set parameter
    h, w = img_gray.shape
    center_X = h/2
    center_Y = w/2

    # Fourier Transform
    fft_Shift, magnitude_spectrum, phase_angle = FT(img_gray)

    # Run gaussian pass --> classify Low or High
    if (Type == 'Low'):
        val, direct = (0, 1)
    else: 
        val, direct = (1, -1)
    for i in range(h):
        for j in range(w):
            fft_Shift[i, j] = fft_Shift[i, j] * (val + direct * (np.exp(-((i - center_X)**2 + (j - center_Y)**2) / (2 * (D0**2)))))

    # Fourier inverse transform
    img = FIT(fft_Shift)

    # spectrum
    specturm = 20 * np.log(1 + np.abs(fft_Shift))

    return img, specturm

# butterworth pass
def butterworth_pass(img_gray, D0, n,Type):
    # set parameter
    h, w = img_gray.shape
    center_X = h/2
    center_Y = w/2

    # Fourier Transform
    fft_Shift, magnitude_spectrum, phase_angle = FT(img_gray)

    # Run gaussian pass --> classify Low or High
    if (Type == 'Low'):
        val, direct = (0, 1)
    else: 
        val, direct = (1, -1)
    for i in range(h):
        for j in range(w):
           fft_Shift[i, j] = fft_Shift[i, j] * (val + direct * (1 / (1 + (((i - center_X)**2 + (j - center_Y)**2) / D0)**n)))
    
    # Fourier inverse transform
    img = FIT(fft_Shift)

    # spectrum
    specturm = 20 * np.log(1 + np.abs(fft_Shift))

    return img, specturm

# homomorphic
def homomorphic(img_gray, gammaH, gammaL, D0, c):
    img_gray = np.log(img_gray) # get ln() for fig. 4.58
    h, w = img_gray.shape
    center_X = h/2
    center_Y = w/2
    
    # Fourier Transform
    fft_Shift, magnitude_spectrum, phase_angle = FT(img_gray)

    # run homomorphic --> reference: https://www.twblogs.net/a/5bca7d8d2b71777351979e58 
    for i in range(h):
        for j in range(w):
           fft_Shift[i, j] = fft_Shift[i, j] * ((gammaH - gammaL) * (1 - np.exp(-c * ((i - center_X)**2 + (j - center_Y)**2) / D0**2)) + gammaL) # formular: 4-147
    
    # Fourier inverse transform
    img = FIT(fft_Shift)
    img = np.exp(img) #  get exp() for fig. 4.58
    
    # spectrum
    specturm = 20 * np.log(1 + np.abs(fft_Shift))

    return img, specturm

# motion blur
def motion_blured(img_gray, addNoise, T, a, b, K):
    # Motion blur parameters
    # addNoise: 1--> yes, 0 --> no
    # T: duration of exposure
    # a: vertical motion
    # b: horizontal motion
    # K: the wiener parameter, small is better

    # FT
    fft_Shift, magnitude_spectrum, phase_angle = FT(img_gray)

    #-----Creat array H(u, v) "start"-----#
    # H(u, v), motion blur function in frequency domain
    # Create matrix H (motion blur function H(u, v))
    M,N = fft_Shift.shape 
    H = np.zeros((M + 1, N + 1), dtype = np.complex128) # +1 to avoid zero division

    # Fill matrix H
    for u in range(1, M + 1):
        for v in range(1, N + 1):
            w = np.pi * (u * a + v * b)
            H[u, v] = (T / w) * np.sin(w) * np.exp(-1j * w) # formular 5-77

    # index slicing
    H = H[1 : , 1 : ]     
    #-----Creat array H(u, v) "end"-----#
    
    # add noise
    if addNoise == 1:
        # G(u, v), blurred image in frequency domain
        G = H * fft_Shift

        # Fourier inverse transform
        img = FIT(G)
        
        # creat noise matrix
        mean = 0
        variance = 20 # 題目設定
        noise = np.random.normal(mean, variance, img.size)
        noise = noise.reshape(img.shape[0], img.shape[1]).astype('uint8')

        img = img * noise
        G, magnitude_spectrum, phase_angle = FT(img)
    else:
        # G(u, v), blurred image in frequency domain
        G = H * fft_Shift

        # Fourier inverse transform
        img = FIT(G)

    # do inverse filter
    # according to formular 5-78
    F_inverse = G / H
    
    img_after_inverse = FIT(F_inverse)

    # do wiener filter
    # according to formular 5-85
    # K = 0.0001
    F_wiener = (1 / H) * (np.abs(H)**2 / (np.abs(H)**2 + K)) * G

    img_after_wiener = FIT(F_wiener)

    # compare with inverse and wiener
    img_compare = img_after_inverse - img_after_wiener

    return img, img_after_inverse, img_after_wiener
   

# 檢查log 資料夾是否存在
def check_log():
    dir = os.listdir()
    if("log" not in dir):
        os.system("mkdir log")

if __name__ == "__main__":
    check_log()
    app = QtWidgets.QApplication(sys.argv)
    mainwindow = QtWidgets.QWidget()
    ui = Ui_mainwindow()
    ui.setupUi(mainwindow)
    mainwindow.show()
    sys.exit(app.exec())
