# mainwindow implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

# import lib
import cv2
import numpy as np
from matplotlib import pyplot as plt
from PyQt6 import QtCore, QtGui, QtWidgets
import sys
import os

class UI(object):
    def setupUi(self, mainwindow):
        mainwindow.setObjectName("mainwindow")
        mainwindow.resize(800, 1000)
        mainwindow.setWindowTitle("R11631029 林正浩 DIP HW2")

        # state 設定
        '''
        init --> 0
        gray --> 1
        threshold --> 2
        resize --> 3
        brightness --> 4
        equalization --> 5
        '''
        self.state = 0

        # 讀取檔案按鈕：Button_open_file
        self.Button_open_file = QtWidgets.QPushButton(mainwindow)
        self.Button_open_file.setGeometry(QtCore.QRect(10, 10, 120, 60))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.Button_open_file.setFont(font)
        self.Button_open_file.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_open_file.setObjectName("Button_open_file")
        self.Button_open_file.clicked.connect(self.Button_open_file_clicked)

        # 顯示原圖片 label: Label_origin_img
        self.Label_origin_img = QtWidgets.QLabel(mainwindow)
        self.Label_origin_img.setGeometry(QtCore.QRect(10, 80, 120, 120))
        self.Label_origin_img.setText("")
        self.Label_origin_img.setObjectName("Label_origin_img")
        
        # 灰階化按鈕 Button_gray
        self.Button_gray = QtWidgets.QPushButton(mainwindow)
        self.Button_gray.setGeometry(QtCore.QRect(10, 210, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Button_gray.setFont(font)
        self.Button_gray.setObjectName("Button_gray")
        self.Button_gray.clicked.connect(self.Button_gray_clicked)

        # 顯示灰階結果
        ## 灰階算法1
        self.Label_gray_1 = QtWidgets.QLabel(mainwindow)
        self.Label_gray_1.setGeometry(QtCore.QRect(200, 10, 180, 240))
        ## 灰階算法2
        self.Label_gray_2 = QtWidgets.QLabel(mainwindow)
        self.Label_gray_2.setGeometry(QtCore.QRect(400, 10, 180, 240))
        ## 灰階差值
        self.Label_gray_diff = QtWidgets.QLabel(mainwindow)
        self.Label_gray_diff.setGeometry(QtCore.QRect(600, 10, 180, 240))
        ## 算法1 histogram
        self.Label_gray_1_hist = QtWidgets.QLabel(mainwindow)
        self.Label_gray_1_hist.setGeometry(QtCore.QRect(200, 260, 360, 180))
        ## 算法2 histogram
        self.Label_gray_2_hist = QtWidgets.QLabel(mainwindow)
        self.Label_gray_2_hist.setGeometry(QtCore.QRect(200, 460, 360, 180))
        ## diff histogram
        self.Label_gray_diff_hist = QtWidgets.QLabel(mainwindow)
        self.Label_gray_diff_hist.setGeometry(QtCore.QRect(200, 660, 360, 180))

        # 二值化按鈕 Button_threshold
        self.Button_threshold = QtWidgets.QPushButton(mainwindow)
        self.Button_threshold.setGeometry(QtCore.QRect(10, 260, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Button_threshold.setFont(font)
        self.Button_threshold.setObjectName("Button_threshold")
        self.Button_threshold.clicked.connect(self.Button_threshold_clicked)
        
        # 顯示二值化結果
        ## 灰階eq1
        self.Label_threshold_1 = QtWidgets.QLabel(mainwindow)
        self.Label_threshold_1.setGeometry(QtCore.QRect(200, 10, 256, 256))
        ## 灰階eq2
        self.Label_threshold_2 = QtWidgets.QLabel(mainwindow)
        self.Label_threshold_2.setGeometry(QtCore.QRect(476, 10, 256, 256))
        ## 灰階eq1_hist
        self.Label_threshold_1_hist = QtWidgets.QLabel(mainwindow)
        self.Label_threshold_1_hist.setGeometry(QtCore.QRect(200, 286, 256, 256))
        ## 灰階eq2_hist
        self.Label_threshold_2_hist = QtWidgets.QLabel(mainwindow)
        self.Label_threshold_2_hist.setGeometry(QtCore.QRect(476, 286, 256, 256))

        # 影像內插法按鈕 Button_resize
        self.Button_resize = QtWidgets.QPushButton(mainwindow)
        self.Button_resize.setGeometry(QtCore.QRect(10, 310, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Button_resize.setFont(font)
        self.Button_resize.setObjectName("Button_resize")
        self.Button_resize.clicked.connect(self.Button_resize_clicked)

        # 顯示resize結果
        ## 灰階eq1_nearest
        self.Label_resize_eq1_nearest = QtWidgets.QLabel(mainwindow)
        self.Label_resize_eq1_nearest.setGeometry(QtCore.QRect(200, 10, 256, 256))
        ## 灰階eq1_bilinear
        self.Label_resize_eq1_bilinear = QtWidgets.QLabel(mainwindow)
        self.Label_resize_eq1_bilinear.setGeometry(QtCore.QRect(476, 10, 256, 256))
        ## 灰階eq2_nearest
        self.Label_resize_eq2_nearest = QtWidgets.QLabel(mainwindow)
        self.Label_resize_eq2_nearest.setGeometry(QtCore.QRect(200, 286, 256, 256))
        ## 灰階eq2_bilinear
        self.Label_resize_eq2_bilinear = QtWidgets.QLabel(mainwindow)
        self.Label_resize_eq2_bilinear.setGeometry(QtCore.QRect(476, 286, 256, 256))
        ## origin_nearest
        self.Label_resize_origin_nearest = QtWidgets.QLabel(mainwindow)
        self.Label_resize_origin_nearest.setGeometry(QtCore.QRect(200, 562, 256, 256))
        ## origin_bilinear
        self.Label_resize_origin_bilinear = QtWidgets.QLabel(mainwindow)
        self.Label_resize_origin_bilinear.setGeometry(QtCore.QRect(476, 562, 256, 256))

        # 提高亮度與對比按鈕 Button_brightness
        self.Button_brightness = QtWidgets.QPushButton(mainwindow)
        self.Button_brightness.setGeometry(QtCore.QRect(10, 360, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Button_brightness.setFont(font)
        self.Button_brightness.setObjectName("Button_brightness")
        self.Button_brightness.clicked.connect(self.Button_brightness_clicke)
        # 顯示亮度對比
        ## gray_1_brigtness
        self.Label_brightness_gray1 = QtWidgets.QLabel(mainwindow)
        self.Label_brightness_gray1.setGeometry(QtCore.QRect(200, 10, 256, 256))
        ## gray_2_brightness
        self.Label_brightness_gray2 = QtWidgets.QLabel(mainwindow)
        self.Label_brightness_gray2.setGeometry(QtCore.QRect(200, 286, 256, 256))
        ## origin_brightness
        self.Label_brightness_origin = QtWidgets.QLabel(mainwindow)
        self.Label_brightness_origin.setGeometry(QtCore.QRect(200, 562, 256, 256))
        
        # 影像均值化按鈕 Button_equalization
        self.Button_equalization = QtWidgets.QPushButton(mainwindow)
        self.Button_equalization.setGeometry(QtCore.QRect(10, 410, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Button_equalization.setFont(font)
        self.Button_equalization.setObjectName("Button_equalization")
        self.Button_equalization.clicked.connect(self.Button_equalization_clicked)
        # 顯示影像均值化
        ## 灰階算法1
        self.Label_gray_1 = QtWidgets.QLabel(mainwindow)
        self.Label_gray_1.setGeometry(QtCore.QRect(200, 10, 180, 240))
        ## 灰階均值化
        self.Label_equalization_gray = QtWidgets.QLabel(mainwindow)
        self.Label_equalization_gray.setGeometry(QtCore.QRect(400, 10, 180, 240))
        ## 原圖均值化
        self.Label_equalization_origin = QtWidgets.QLabel(mainwindow)
        self.Label_equalization_origin.setGeometry(QtCore.QRect(600, 10, 180, 240))
        ## 灰階1 histogram
        self.Label_gray_1_hist = QtWidgets.QLabel(mainwindow)
        self.Label_gray_1_hist.setGeometry(QtCore.QRect(200, 260, 360, 180))
        ## 均值化 histogram
        self.Label_equalization_gray_hist = QtWidgets.QLabel(mainwindow)
        self.Label_equalization_gray_hist.setGeometry(QtCore.QRect(200, 460, 360, 180))


        # slider1 
        # threshold
        # resize
        # brightness
        self.Slider_1 = QtWidgets.QSlider(mainwindow)
        self.Slider_1.setGeometry(QtCore.QRect(10, 490, 160, 30))
        self.Slider_1.setMinimum(-100)
        self.Slider_1.setMaximum(100)
        self.Slider_1.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.Slider_1.setObjectName("Slider_1")
        self.Slider_1.valueChanged.connect(self.Slider_1_value_changed)

        self.Label_Slider_1 = QtWidgets.QLabel(mainwindow)
        self.Label_Slider_1.setGeometry(QtCore.QRect(10, 450, 120, 30))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Label_Slider_1.setFont(font)
        self.Label_Slider_1.setObjectName("Label_Slider_1")

        # slider2
        # contrast
        self.Slider_2 = QtWidgets.QSlider(mainwindow)
        self.Slider_2.setGeometry(QtCore.QRect(10, 570, 160, 30))
        self.Slider_2.setMinimum(-100)
        self.Slider_2.setMaximum(100)
        self.Slider_2.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.Slider_2.setObjectName("Slider_2")
        self.Slider_2.valueChanged.connect(self.Slider_2_value_changed)

        self.Label_Slider_2 = QtWidgets.QLabel(mainwindow)
        self.Label_Slider_2.setGeometry(QtCore.QRect(10, 530, 120, 30))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Label_Slider_2.setFont(font)
        self.Label_Slider_2.setObjectName("Label_Slider_2")

        # 顯示結果 Button_show
        self.Button_show = QtWidgets.QPushButton(mainwindow)
        self.Button_show.setGeometry(QtCore.QRect(10, 610, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Button_show.setFont(font)
        self.Button_show.setObjectName("Button_show")
        self.Button_show.clicked.connect(self.Button_show_clicked)

        self.retranslateUi(mainwindow)
        QtCore.QMetaObject.connectSlotsByName(mainwindow)

    def retranslateUi(self, mainwindow):
        self.Slider_hide()
        _translate = QtCore.QCoreApplication.translate
        self.Button_open_file.setText(_translate("mainwindow", "Open"))
        self.Button_gray.setText(_translate("mainwindow", "Gray"))
        self.Button_threshold.setText(_translate("mainwindow", "Threshold"))
        self.Button_resize.setText(_translate("mainwindow", "Resize"))
        self.Button_brightness.setText(_translate("mainwindow", "Brightness"))
        self.Button_equalization.setText(_translate("mainwindow", "Equalization"))
        self.Button_show.setText(_translate("mainwindow", "Show"))

    # init value
    def init_valus(self):
        self.Slider_1_val = 0
        self.Slider_2_val = 0
    def Slider_hide(self):
        self.Label_Slider_1.setText('')
        self.Label_Slider_2.setText('')
        self.Slider_1.setVisible(False)
        self.Slider_2.setVisible(False)

    # close all label show img 
    def none_visual_label(self):
        # 灰階
        self.Label_gray_1.setVisible(False)
        self.Label_gray_2.setVisible(False)
        self.Label_gray_diff.setVisible(False)
        self.Label_gray_1_hist.setVisible(False)
        self.Label_gray_2_hist.setVisible(False)
        self.Label_gray_diff_hist.setVisible(False)
        # 二值化
        self.Label_threshold_1.setVisible(False)
        self.Label_threshold_2.setVisible(False)
        self.Label_threshold_1_hist.setVisible(False)
        self.Label_threshold_2_hist.setVisible(False)     
        # resize
        self.Label_resize_eq1_nearest.setVisible(False)
        self.Label_resize_eq1_bilinear.setVisible(False)
        self.Label_resize_eq2_nearest.setVisible(False)
        self.Label_resize_eq2_bilinear.setVisible(False)
        self.Label_resize_origin_nearest.setVisible(False)
        self.Label_resize_origin_bilinear.setVisible(False)
        # brightness & contrast
        self.Label_brightness_gray1.setVisible(False)
        self.Label_brightness_gray2.setVisible(False)
        self.Label_brightness_origin.setVisible(False)
        # equalization
        self.Label_equalization_gray.setVisible(False)
        self.Label_equalization_origin.setVisible(False)
        self.Label_gray_1_hist.setVisible(False)
        self.Label_equalization_gray_hist.setVisible(False)

    def Button_open_file_clicked(self):
        self.none_visual_label()
        self.init_valus()
        try:
            file_path, file_type = QtWidgets.QFileDialog.getOpenFileName()
            # print(file_path)  # --> /Users/linchenghao/Desktop/Master/Course/111-1/Digital_Image_Processing/HW/HW2/Part2/img/Lena.jpeg
            self.file_path = file_path
            self.Label_origin_img.setPixmap(QtGui.QPixmap(self.file_path))
            self.Label_origin_img.setScaledContents(True)  # 調整圖片size用
            # run_gray_histogram_and_save(self.file_path)
        except:
            print('')
    
    def Button_gray_clicked(self):
        self.none_visual_label()
        self.Slider_hide()
        self.state = 1
        run_gray_histogram_and_save(self.file_path)
        self.Label_gray_1.setPixmap(QtGui.QPixmap('log/image_gray_1.png'))
        self.Label_gray_1.setScaledContents(True)
        self.Label_gray_2.setPixmap(QtGui.QPixmap('log/image_gray_2.png'))
        self.Label_gray_2.setScaledContents(True)
        self.Label_gray_diff.setPixmap(QtGui.QPixmap('log/image_gray_diff.png'))
        self.Label_gray_diff.setScaledContents(True)
        self.Label_gray_1_hist.setPixmap(QtGui.QPixmap('log/img_gray_1_hist.png'))
        self.Label_gray_1_hist.setScaledContents(True)
        self.Label_gray_2_hist.setPixmap(QtGui.QPixmap('log/img_gray_2_hist.png'))
        self.Label_gray_2_hist.setScaledContents(True)
        self.Label_gray_diff_hist.setScaledContents(True)
        self.Label_gray_diff_hist.setPixmap(QtGui.QPixmap('log/img_gray_diff_hist.png'))
    
    def Button_threshold_clicked(self):
        self.none_visual_label()
        self.Slider_hide()
        self.Slider_1.setVisible(True)
        self.init_valus()
        self.state = 2
        self.Label_Slider_1.setVisible(True)
        self.Label_Slider_1.setText("Threshold-->"+ str(int((self.Slider_1_val + 100) /200 * 255)))
    
    def Button_resize_clicked(self):
        self.none_visual_label()
        self.Slider_hide()
        self.Slider_1.setVisible(True)
        self.init_valus()
        self.state = 3
        self.Label_Slider_1.setVisible(True)
        self.Label_Slider_1.setText("Resize(%)-->" + str(int((self.Slider_1_val + 100))))

    def Button_brightness_clicke(self):
        self.none_visual_label()
        self.Slider_hide()
        self.Slider_1.setVisible(True)
        self.Slider_2.setVisible(True)
        self.init_valus()
        self.state = 4
        self.Label_Slider_1.setVisible(True)
        self.Label_Slider_1.setText("Brightness-->" + str(int(self.Slider_1_val * 2.55)))
        self.Label_Slider_2.setVisible(True)
        self.Label_Slider_2.setText("Contract-->" + str(int((self.Slider_2_val + 100) /200 * 255)))
    
    def Button_equalization_clicked(self):
        self.state = 5
        self.none_visual_label()
        self.Slider_hide()
        run_equalization(self.file_path)


    # Slider_1 數值取得狀況
    def Slider_1_value_changed(self):
        self.Slider_1_val =  self.Slider_1.value()
        if (self.state == 2):
            self.Label_Slider_1.setText('Threshold-->' + str(int((self.Slider_1_val + 100) /200 * 255))) 
        if (self.state == 3):
            self.Label_Slider_1.setText("Resize(%)-->" + str(int((self.Slider_1_val + 100))))
        if (self.state == 4):
            self.Label_Slider_1.setText("Brightness-->" + str(int(self.Slider_1_val * 2.55)))    
    
    # Slider_2 數值取得狀況
    def Slider_2_value_changed(self):
        self.Slider_2_val =  self.Slider_2.value()
        if (self.state == 4):
            self.Label_Slider_2.setText("Contract-->" + str(int((self.Slider_2_val + 100) /200 * 255))) 
        
    def Button_show_clicked(self):
        self.none_visual_label()
        if (self.state == 1):
            # print('顯示灰階')
            self.Label_gray_1.setVisible(True)
            self.Label_gray_2.setVisible(True)
            self.Label_gray_diff.setVisible(True)
            self.Label_gray_1_hist.setVisible(True)
            self.Label_gray_2_hist.setVisible(True)
            self.Label_gray_diff_hist.setVisible(True)
        if (self.state == 2):
            # print('顯示二值化')
            threshold_value = int((self.Slider_1_val + 100) /200 * 255)
            run_threshold(self.file_path, threshold_value)
            self.Label_threshold_1.setPixmap(QtGui.QPixmap("log/image_threshold_1.png"))
            self.Label_threshold_1.setScaledContents(True)
            self.Label_threshold_1.setVisible(True)
            self.Label_threshold_2.setPixmap(QtGui.QPixmap("log/image_threshold_2.png"))
            self.Label_threshold_2.setScaledContents(True)
            self.Label_threshold_2.setVisible(True)
            self.Label_threshold_1_hist.setPixmap(QtGui.QPixmap("log/img_threshold_1_hist.png"))
            self.Label_threshold_1_hist.setScaledContents(True)
            self.Label_threshold_1_hist.setVisible(True)
            self.Label_threshold_2_hist.setPixmap(QtGui.QPixmap("log/img_threshold_2_hist.png"))
            self.Label_threshold_2_hist.setScaledContents(True)
            self.Label_threshold_2_hist.setVisible(True)
        if (self.state == 3):
            # print('顯示Resize')
            resize_value = int((self.Slider_1_val + 100))
            run_resize(self.file_path, resize_value)
            self.Label_resize_eq1_nearest.setPixmap(QtGui.QPixmap("log/img_resize_nearest_gray_1.png"))
            self.Label_resize_eq1_nearest.setScaledContents(True)
            self.Label_resize_eq1_nearest.setVisible(True)

            self.Label_resize_eq1_bilinear.setPixmap(QtGui.QPixmap("log/img_resize_bilinear_gray_1.png"))
            self.Label_resize_eq1_bilinear.setScaledContents(True)
            self.Label_resize_eq1_bilinear.setVisible(True)

            self.Label_resize_eq2_nearest.setPixmap(QtGui.QPixmap("log/img_resize_nearest_gray_2.png"))
            self.Label_resize_eq2_nearest.setScaledContents(True)
            self.Label_resize_eq2_nearest.setVisible(True)

            self.Label_resize_eq2_bilinear.setPixmap(QtGui.QPixmap("log/img_resize_bilinear_gray_2.png"))
            self.Label_resize_eq2_bilinear.setScaledContents(True)
            self.Label_resize_eq2_bilinear.setVisible(True)

            self.Label_resize_origin_nearest.setPixmap(QtGui.QPixmap("log/img_resize_nearest.png"))
            self.Label_resize_origin_nearest.setScaledContents(True)
            self.Label_resize_origin_nearest.setVisible(True)

            self.Label_resize_origin_bilinear.setPixmap(QtGui.QPixmap("log/img_resize_bilinear.png"))
            self.Label_resize_origin_bilinear.setScaledContents(True)
            self.Label_resize_origin_bilinear.setVisible(True)
        if (self.state == 4):
            # print('顯示brightness')
            brightness_value = int((self.Slider_1_val + 100) /200 * 255)
            contrast_value = int(self.Slider_2_val * 2.55)
            run_brightness_contrast(self.file_path, brightness_value, contrast_value)

            self.Label_brightness_gray1.setPixmap(QtGui.QPixmap("log/img_brightness_and_contrast_gray_1.png"))
            self.Label_brightness_gray1.setScaledContents(True)
            self.Label_brightness_gray1.setVisible(True)
            self.Label_brightness_gray2.setPixmap(QtGui.QPixmap("log/img_brightness_and_contrast_gray_2.png"))
            self.Label_brightness_gray2.setScaledContents(True)
            self.Label_brightness_gray2.setVisible(True)
            self.Label_brightness_origin.setPixmap(QtGui.QPixmap("log/img_brightness_and_contrast_origin.png"))
            self.Label_brightness_origin.setScaledContents(True)
            self.Label_brightness_origin.setVisible(True)

        if (self.state == 5):
            print('顯示equalization')
            self.Label_gray_1.setPixmap(QtGui.QPixmap('log/image_gray_1.png'))
            self.Label_gray_1.setScaledContents(True)
            self.Label_gray_1.setVisible(True)

            self.Label_equalization_gray.setPixmap(QtGui.QPixmap('log/img_gray_equalization.png'))
            self.Label_equalization_gray.setScaledContents(True)
            self.Label_equalization_gray.setVisible(True)

            self.Label_equalization_origin.setPixmap(QtGui.QPixmap('log/img_equalization.png'))
            self.Label_equalization_origin.setScaledContents(True)
            self.Label_equalization_origin.setVisible(True)

            self.Label_gray_1_hist.setPixmap(QtGui.QPixmap('log/img_gray_1_hist.png'))
            self.Label_gray_1_hist.setScaledContents(True)
            self.Label_gray_1_hist.setVisible(True)

            self.Label_equalization_gray_hist.setPixmap(QtGui.QPixmap('log/img_gray_equalization_hist.png'))
            self.Label_equalization_gray_hist.setScaledContents(True)
            self.Label_equalization_gray_hist.setVisible(True)
        

# quition 2 gray equation
def gray(img, eq_type): # img: array, eq_type: eq1 or eq2
    if eq_type == 1: # eq1
        result = (img[:, :, 0] + img[:, :, 1] + img[:, :, 2]) / 3
    if eq_type == 2: # eq2
        result = 0.299 * img[:, :, 2] + 0.587 * img[:, :, 1] + 0.114 * img[:, :, 0]
    return np.round(result)

# calculate histogram
def cal_hist(matrix):
    hist = np.zeros(256)
    h, w = matrix.shape
    for i in range(256):
        count = 0
        for j in range(h):
            for k in range(w):
                if (i == matrix[j][k]):
                    count += 1
        hist[i] = count
    return hist

def run_gray_histogram_and_save(file_path):
    img = cv2.imread(file_path) * 1.
    gray1 = gray(img, 1)
    gray2 = gray(img, 2)
    gray_diff = gray1 - gray2
    cv2.imwrite('log/image_gray_1.png', gray1) 
    cv2.imwrite('log/image_gray_2.png', gray2) 
    cv2.imwrite('log/image_gray_diff.png', gray_diff * 255) 
    # histogram
    gray1_calhist = cal_hist(gray1)
    gray2_calhist = cal_hist(gray2)
    gray_diff_calhist = cal_hist(gray_diff)

    plt.bar(list(range(256)), gray1_calhist)
    plt.title('(R + G + B) ÷ 3')
    plt.savefig('log/img_gray_1_hist.png')
    plt.close()
    plt.bar(list(range(256)), gray2_calhist)
    plt.title('0.299 • R + 0.587 • G + 0.114 • B')
    plt.savefig('log/img_gray_2_hist.png')
    plt.close()
    plt.bar(list(range(256)), gray_diff_calhist)
    plt.title('Difference of two equation.')
    plt.savefig('log/img_gray_diff_hist.png')
    plt.close()
    # plt.show()

# quition 4 threshold
def img_threshold(Matrix, threshold):
    h, w = Matrix.shape
    Matrix_threshold = np.zeros(Matrix.shape)
    for i in range(h):
        for j in range(w):
            if (Matrix[i][j] < threshold):
                Matrix_threshold[i][j] = 0
            else:
                Matrix_threshold[i][j] = 255
    return Matrix_threshold

def run_threshold(file_path, threshold_val):
    img = cv2.imread(file_path) * 1.
    gray1 = gray(img, 1)
    gray2 = gray(img, 2)
    threshold1 = img_threshold(gray1, threshold_val)
    threshold2 = img_threshold(gray2, threshold_val)
    cv2.imwrite('log/image_threshold_1.png', threshold1) 
    cv2.imwrite('log/image_threshold_2.png', threshold2)
    threshold1_calhist = cal_hist(threshold1)
    threshold2_calhist = cal_hist(threshold2)
    plt.bar(list(range(256)), threshold1_calhist)
    plt.title('(R + G + B) ÷ 3')
    plt.savefig('log/img_threshold_1_hist.png')
    plt.close()
    plt.bar(list(range(256)), threshold2_calhist)
    plt.title('0.299 • R + 0.587 • G + 0.114 • B')
    plt.savefig('log/img_threshold_2_hist.png')
    plt.close()

# quition 5 resize img: nearest and bilinear
def nearest_neighbor_resize(img, side_percent):
    side_percent = side_percent / 100
    h, w = img.shape
    new_h, new_w = (round(h * side_percent), round(w * side_percent))
    resize_img = np.zeros((new_h, new_w))
    s_w = (w) / (new_w)
    s_h = (h) / (new_h)
    for i in range(new_h):
        for j in range(new_w):
            p_x = int(i * s_h)
            p_y = int(j * s_w)
            resize_img[i][j] = img[p_x, p_y]
    return resize_img

def bilinear_interpolation(image, side_percent):
    side_percent = side_percent / 100
    h, w = image.shape
    new_h, new_w = round(h * side_percent), round(w * side_percent)
    s_w = (w) / (new_w)
    s_h = (h) / (new_h)

    new_image = np.zeros((new_h, new_w), np.uint8)

    for i in range(new_h):
        for j in range(new_w):
            y = (j + 0.5) * (s_w) - 0.5
            x = (i + 0.5) * (s_h) - 0.5

            x_int = int(x)
            y_int = int(y)

            # Prevent crossing
            x_int = min(x_int, h-2)
            y_int = min(y_int, w-2)

            x_diff = x - x_int
            y_diff = y - y_int
               
            a = image[x_int, y_int]
            b = image[x_int, y_int+1]
            c = image[x_int+1, y_int]
            d = image[x_int+1, y_int+1]

            new_image[i, j] = a * (1 - x_diff) * (1 - y_diff) + b * (1 - x_diff) * (y_diff) + c * (x_diff) * (1 - y_diff) + d * x_diff * y_diff

    return new_image

def run_resize(file_path, side_percent):
    img = cv2.imread(file_path) * 1.

    # 原圖縮小用
    img_B = img[:, :, 0]
    img_G = img[:, :, 1]
    img_R = img[:, :, 2]
    resize_img_B_nearest = nearest_neighbor_resize(img_B, side_percent)
    resize_img_G_nearest = nearest_neighbor_resize(img_G, side_percent)
    resize_img_R_nearest = nearest_neighbor_resize(img_R, side_percent)
    img_origin_resize_nearest = np.zeros((resize_img_R_nearest.shape[0], resize_img_R_nearest.shape[1], 3))
    img_origin_resize_nearest[:, :, 0] = resize_img_B_nearest
    img_origin_resize_nearest[:, :, 1] = resize_img_G_nearest
    img_origin_resize_nearest[:, :, 2] = resize_img_R_nearest

    resize_img_B_bilinear = bilinear_interpolation(img_B, side_percent)
    resize_img_G_bilinear = bilinear_interpolation(img_G, side_percent)
    resize_img_R_bilinear = bilinear_interpolation(img_R, side_percent)
    img_origin_resize_bilinear = np.zeros((resize_img_B_bilinear.shape[0], resize_img_B_bilinear.shape[1], 3))
    img_origin_resize_bilinear[:, :, 0] = resize_img_B_bilinear
    img_origin_resize_bilinear[:, :, 1] = resize_img_G_bilinear
    img_origin_resize_bilinear[:, :, 2] = resize_img_R_bilinear
    cv2.imwrite("log/img_resize_nearest.png", img_origin_resize_nearest)
    cv2.imwrite("log/img_resize_bilinear.png", img_origin_resize_bilinear)

    gray1 = gray(img, 1)
    gray2 = gray(img, 2)

    resize_gray_1_nearest = nearest_neighbor_resize(gray1, side_percent)
    resize_gray_1_bilinear = bilinear_interpolation(gray1, side_percent)
    cv2.imwrite('log/img_resize_nearest_gray_1.png', resize_gray_1_nearest)
    cv2.imwrite('log/img_resize_bilinear_gray_1.png', resize_gray_1_bilinear)
    resize_gray_2_nearest = nearest_neighbor_resize(gray2, side_percent)
    resize_gray_2_bilinear = bilinear_interpolation(gray2, side_percent)
    cv2.imwrite('log/img_resize_nearest_gray_2.png', resize_gray_2_nearest)
    cv2.imwrite('log/img_resize_bilinear_gray_2.png', resize_gray_2_bilinear)
    
# quition 6 adjust brightness
def adjust_brightness_contrast(img, brightness, contrast):
    result = img * (contrast/127 + 1) - contrast + brightness
    result = np.clip(result, 0, 255)
    result = np.uint8(result)
    return result
def run_brightness_contrast(file_path, brightness, contrast):
    img = cv2.imread(file_path)
    gray1 = gray(img, 1)
    gray2 = gray(img, 2)
    mod_gray1 = adjust_brightness_contrast(gray1, brightness, contrast)
    cv2.imwrite('log/img_brightness_and_contrast_gray_1.png', mod_gray1)
    mod_gray2 = adjust_brightness_contrast(gray2, brightness, contrast)
    cv2.imwrite('log/img_brightness_and_contrast_gray_2.png', mod_gray2)

    # 調整原圖
    img_B = img[:, :, 0]
    img_G = img[:, :, 1]
    img_R = img[:, :, 2]
    mod_B = adjust_brightness_contrast(img_B, brightness, contrast)
    mod_G = adjust_brightness_contrast(img_G, brightness, contrast)
    mod_R = adjust_brightness_contrast(img_R, brightness, contrast)
    mod_origin = np.zeros(img.shape)
    mod_origin[:, :, 0] = mod_B
    mod_origin[:, :, 1] = mod_G
    mod_origin[:, :, 2] = mod_R
    cv2.imwrite('log/img_brightness_and_contrast_origin.png', mod_origin)

# quition7 histogram equalization
def cal_probability(img): # probability
    h, w = img.shape
    area  = h * w
    hist = cal_hist(img)
    p = hist / area
    return p
def cal_Cumulative_probability(p): # Cumulative_probability
    CP = np.zeros(len(p))
    count = 0
    for index, value in enumerate(p):
        count += value
        CP[index] = count * 255
    return CP
def equalization(img):
    CP = cal_Cumulative_probability(cal_probability(img))
    h, w = img.shape
    equalization_img = np.zeros(img.shape)
    for i in range(h):
        for j in range(w):
            equalization_img[i][j] = CP[int(img[i][j])]
    return equalization_img

def run_equalization(file_path):
    img = cv2.imread(file_path) * 1.
    gray1 = gray(img, 1)
    cv2.imwrite('log/image_gray_1.png', gray1)
    img_equal = equalization(gray1)
    cv2.imwrite('log/img_gray_equalization.png', img_equal)
    # histogram
    gray1_calhist = cal_hist(gray1)
    equal_hist = cal_hist(np.round(img_equal))
    plt.bar(list(range(256)), gray1_calhist)
    plt.title('(R + G + B) ÷ 3')
    plt.savefig('log/img_gray_1_hist.png')
    plt.close()
    plt.bar(list(range(256)), equal_hist)
    plt.title('After Equalization')
    plt.savefig('log/img_gray_equalization_hist.png')
    plt.close()
    img_B = img[:, :, 0]
    img_G = img[:, :, 1]
    img_R = img[:, :, 2]
    mod_B = equalization(img_B)
    mod_G = equalization(img_G)
    mod_R = equalization(img_R)
    mod_origin = np.zeros(img.shape)
    mod_origin[:, :, 0] = mod_B
    mod_origin[:, :, 1] = mod_G
    mod_origin[:, :, 2] = mod_R
    cv2.imwrite('log/img_equalization.png', mod_origin)




# 檢查log 資料夾是否存在
def check_log():
    dir = os.listdir()
    if("log" not in dir):
        os.system("mkdir log")

check_log()

app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
window = UI()
window.setupUi(MainWindow)
MainWindow.show()
app.exec()