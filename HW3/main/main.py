# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
import math
import os
import sys
import time


class Ui_mainwindow(object):
    def setupUi(self, mainwindow):
        mainwindow.setObjectName("mainwindow")
        mainwindow.resize(1920, 768)
        self.state = 3
        #<-- set Tab (start) -->#
        self.tabWidget = QtWidgets.QTabWidget(mainwindow)
        self.tabWidget.setGeometry(QtCore.QRect(10, 100, 420, 512))
        self.tabWidget.setObjectName("tabWidget")
        #<-- set Tab (end) -->#
        
        #<-- Tab filter (start) -->#
        self.filters = QtWidgets.QWidget()
        self.filters.setObjectName("filters")

        self.slider_size_filter = QtWidgets.QSlider(self.filters)
        self.slider_size_filter.setGeometry(QtCore.QRect(10, 140, 160, 22))
        self.slider_size_filter.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.slider_size_filter.setObjectName("slider_size_filter")
        self.slider_size_filter.setMaximum(14)
        self.slider_size_filter.valueChanged.connect(self.Slider_value_changed)

        self.slider_sigma_filter = QtWidgets.QSlider(self.filters)
        self.slider_sigma_filter.setGeometry(QtCore.QRect(10, 190, 160, 22))
        self.slider_sigma_filter.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.slider_sigma_filter.setObjectName("slider_sigma_filter")
        self.slider_sigma_filter.valueChanged.connect(self.Slider_value_changed)

        self.button_readme_filter = QtWidgets.QPushButton(self.filters)
        self.button_readme_filter.setGeometry(QtCore.QRect(10, 20, 200, 100))
        self.button_readme_filter.setObjectName("button_readme_filter")
        self.button_readme_filter.clicked.connect(self.button_readme_clicked)

        self.button_show_filter = QtWidgets.QPushButton(self.filters)
        self.button_show_filter.setGeometry(QtCore.QRect(210, 20, 200, 100))
        self.button_show_filter.setObjectName("button_show_filter")
        self.button_show_filter.clicked.connect(self.button_show_clicked)

        self.label_size_filter = QtWidgets.QLabel(self.filters)
        self.label_size_filter.setGeometry(QtCore.QRect(180, 140, 221, 16))
        self.label_size_filter.setObjectName("label_size_filter")

        self.label_sigma_filter = QtWidgets.QLabel(self.filters)
        self.label_sigma_filter.setGeometry(QtCore.QRect(180, 190, 221, 16))
        self.label_sigma_filter.setObjectName("label_sigma_filter")

        self.tabWidget.addTab(self.filters, "")
        #<-- Tab filter (end) -->#

        #<-- Tab edge (start) -->#
        self.edge = QtWidgets.QWidget()
        self.edge.setObjectName("edge")

        self.button_show_edge = QtWidgets.QPushButton(self.edge)
        self.button_show_edge.setGeometry(QtCore.QRect(210, 20, 200, 100))
        self.button_show_edge.setObjectName("button_show_edge")
        self.button_show_edge.clicked.connect(self.button_show_clicked)

        self.slider_sigma_edge = QtWidgets.QSlider(self.edge)
        self.slider_sigma_edge.setGeometry(QtCore.QRect(10, 190, 160, 22))
        self.slider_sigma_edge.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.slider_sigma_edge.setObjectName("slider_sigma_edge")
        self.slider_sigma_edge.valueChanged.connect(self.Slider_value_changed)

        self.slider_size_edge = QtWidgets.QSlider(self.edge)
        self.slider_size_edge.setGeometry(QtCore.QRect(10, 140, 160, 22))
        self.slider_size_edge.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.slider_size_edge.setObjectName("slider_size_edge")
        self.slider_size_edge.setMaximum(14)
        self.slider_size_edge.valueChanged.connect(self.Slider_value_changed)

        self.button_readme_edge = QtWidgets.QPushButton(self.edge)
        self.button_readme_edge.setGeometry(QtCore.QRect(10, 20, 200, 100))
        self.button_readme_edge.setObjectName("button_readme_edge")
        self.button_readme_edge.clicked.connect(self.button_readme_clicked)

        self.label_size_edge = QtWidgets.QLabel(self.edge)
        self.label_size_edge.setGeometry(QtCore.QRect(180, 140, 221, 16))
        self.label_size_edge.setObjectName("label_size_edge")

        self.label_sigma_edge = QtWidgets.QLabel(self.edge)
        self.label_sigma_edge.setGeometry(QtCore.QRect(180, 190, 221, 16))
        self.label_sigma_edge.setObjectName("label_sigma_edge")
        
        self.tabWidget.addTab(self.edge, "")
        #<-- Tab edge (end) -->#

        #<-- Tab hist (start) -->#
        self.hist = QtWidgets.QWidget()
        self.hist.setObjectName("hist")

        self.button_show_hist = QtWidgets.QPushButton(self.hist)
        self.button_show_hist.setGeometry(QtCore.QRect(210, 20, 200, 100))
        self.button_show_hist.setObjectName("button_show_hist")
        self.button_show_hist.clicked.connect(self.button_show_clicked)

        self.slider_size_hist = QtWidgets.QSlider(self.hist)
        self.slider_size_hist.setGeometry(QtCore.QRect(10, 140, 160, 22))
        self.slider_size_hist.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.slider_size_hist.setObjectName("slider_size_hist")
        self.slider_size_hist.setMaximum(14)
        self.slider_size_hist.valueChanged.connect(self.Slider_value_changed)

        self.button_readme_hist = QtWidgets.QPushButton(self.hist)
        self.button_readme_hist.setGeometry(QtCore.QRect(10, 20, 200, 100))
        self.button_readme_hist.setObjectName("button_readme_hist")
        self.button_readme_hist.clicked.connect(self.button_readme_clicked)

        self.label_size_hist = QtWidgets.QLabel(self.hist)
        self.label_size_hist.setGeometry(QtCore.QRect(180, 140, 221, 16))
        self.label_size_hist.setObjectName("label_size_hist")

        self.tabWidget.addTab(self.hist, "")
        #<-- Tab hist (end) -->#

        self.tabWidget.tabBarClicked.connect(self.handle_tabbar_clicked)
        #<-- show dealTime (start) -->#
        self.dealtime_widget = QtWidgets.QWidget(mainwindow)
        self.dealtime_widget.setGeometry(QtCore.QRect(430, 10, 400, 100))
        self.dealtime_widget.setObjectName("dealtime_widget")

        self.horizontalLayoutWidget = QtWidgets.QWidget(self.dealtime_widget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(40, 10, 350, 80))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.time_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.time_label.setObjectName("time_label")
        self.horizontalLayout.addWidget(self.time_label)

        self.label_show_time = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_show_time.setText("")
        self.label_show_time.setObjectName("label_show_time")
        self.horizontalLayout.addWidget(self.label_show_time)
        #<-- show dealTime (end) -->#

        #<-- show origin image (start) -->#
        self.origin_img = QtWidgets.QLabel(mainwindow)
        self.origin_img.setGeometry(QtCore.QRect(440, 140, 256, 256))
        self.origin_img.setText("")
        self.origin_img.setObjectName("origin_img")
        #<-- show origin image (end) -->#
        
        #<-- read image button (start) -->#
        self.button_read_img = QtWidgets.QPushButton(mainwindow)
        self.button_read_img.setGeometry(QtCore.QRect(10, 10, 420, 80))
        self.button_read_img.setObjectName("read_img")
        self.button_read_img.clicked.connect(self.button_read_image_clicked)
        #<-- read image button (end) -->#

        #<-- photo show-->#
        self.photol_1 = QtWidgets.QLabel(mainwindow)
        self.photol_1.setGeometry(QtCore.QRect(720, 140, 256, 256))
        self.photol_1.setText("")
        self.photol_1.setObjectName("photol_1")
        self.photol_2 = QtWidgets.QLabel(mainwindow)
        self.photol_2.setGeometry(QtCore.QRect(1000, 140, 256, 256))
        self.photol_2.setText("")
        self.photol_2.setObjectName("photol_2")
        self.photol_3 = QtWidgets.QLabel(mainwindow)
        self.photol_3.setGeometry(QtCore.QRect(430, 420, 256, 256))
        self.photol_3.setText("")
        self.photol_3.setObjectName("photol_3")
        self.photol_4 = QtWidgets.QLabel(mainwindow)
        self.photol_4.setGeometry(QtCore.QRect(700, 420, 256, 256))
        self.photol_4.setText("")
        self.photol_4.setObjectName("photol_4")
        self.photol_5 = QtWidgets.QLabel(mainwindow)
        self.photol_5.setGeometry(QtCore.QRect(970, 420, 256, 256))
        self.photol_5.setText("")
        self.photol_5.setObjectName("photol_5")
        self.photol_6 = QtWidgets.QLabel(mainwindow)
        self.photol_6.setGeometry(QtCore.QRect(1270, 140, 256, 256))
        self.photol_6.setText("")
        self.photol_6.setObjectName("photol_6")
        self.photol_7 = QtWidgets.QLabel(mainwindow)
        self.photol_7.setGeometry(QtCore.QRect(1540, 140, 256, 256))
        self.photol_7.setText("")
        self.photol_7.setObjectName("photol_7")
        self.photol_8 = QtWidgets.QLabel(mainwindow)
        self.photol_8.setGeometry(QtCore.QRect(1240, 420, 256, 256))
        self.photol_8.setText("")
        self.photol_8.setObjectName("photol_8")
        self.label_photo_1 = QtWidgets.QLabel(mainwindow)
        self.label_photo_1.setGeometry(QtCore.QRect(730, 110, 200, 16))
        self.label_photo_1.setObjectName("label_photo_1")
        self.label_photo_2 = QtWidgets.QLabel(mainwindow)
        self.label_photo_2.setGeometry(QtCore.QRect(1010, 110, 200, 16))
        self.label_photo_2.setObjectName("label_photo_2")
        self.label_photo_6 = QtWidgets.QLabel(mainwindow)
        self.label_photo_6.setGeometry(QtCore.QRect(1280, 110, 200, 16))
        self.label_photo_6.setObjectName("label_photo_6")
        self.label_photo_7 = QtWidgets.QLabel(mainwindow)
        self.label_photo_7.setGeometry(QtCore.QRect(1540, 110, 200, 16))
        self.label_photo_7.setObjectName("label_photo_7")
        self.label_photo_3 = QtWidgets.QLabel(mainwindow)
        self.label_photo_3.setGeometry(QtCore.QRect(430, 400, 200, 16))
        self.label_photo_3.setObjectName("label_photo_3")
        self.label_photo_4 = QtWidgets.QLabel(mainwindow)
        self.label_photo_4.setGeometry(QtCore.QRect(730, 400, 200, 16))
        self.label_photo_4.setObjectName("label_photo_4")
        self.label_photo_5 = QtWidgets.QLabel(mainwindow)
        self.label_photo_5.setGeometry(QtCore.QRect(990, 400, 200, 16))
        self.label_photo_5.setObjectName("label_photo_5")
        self.label_photo_8 = QtWidgets.QLabel(mainwindow)
        self.label_photo_8.setGeometry(QtCore.QRect(1260, 400, 200, 16))
        self.label_photo_8.setObjectName("label_photo_8")

        self.retranslateUi(mainwindow)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(mainwindow)

    def retranslateUi(self, mainwindow):
        _translate = QtCore.QCoreApplication.translate
        mainwindow.setWindowTitle(_translate("mainwindow", "R11631029 林正浩"))
        self.button_readme_filter.setText(_translate("mainwindow", "ReadMe"))
        self.button_show_filter.setText(_translate("mainwindow", "Show"))
        self.label_size_filter.setText(_translate("mainwindow", "size:"))
        self.label_sigma_filter.setText(_translate("mainwindow", "sigma:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.filters), _translate("mainwindow", "Filters"))
        self.button_show_edge.setText(_translate("mainwindow", "Show"))
        self.button_readme_edge.setText(_translate("mainwindow", "ReadMe"))
        self.label_size_edge.setText(_translate("mainwindow", "size:"))
        self.label_sigma_edge.setText(_translate("mainwindow", "sigma:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.edge), _translate("mainwindow", "Edge detection"))
        self.button_show_hist.setText(_translate("mainwindow", "Show"))
        self.button_readme_hist.setText(_translate("mainwindow", "ReadMe"))
        self.label_size_hist.setText(_translate("mainwindow", "size:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.hist), _translate("mainwindow", "Local enhancement"))
        self.time_label.setText(_translate("mainwindow", "time:"))
        self.button_read_img.setText(_translate("mainwindow", "Read Image"))
    
    #<-- button read image clicked -->#
    def button_read_image_clicked(self):
        try:
            self.image_path, ret= QtWidgets.QFileDialog.getOpenFileName()
            self.im = cv2.imread(self.image_path).astype(float)
            self.im = (self.im[:, :, 0] + self.im[:, :, 1] + self.im[:, :, 2]) / 3
            self.origin_img.setPixmap(QtGui.QPixmap(self.image_path))
            self.origin_img.setScaledContents(True)
            # print(image_path) 
        except:
            Error_Text = '請重新讀檔，並確認路徑不存在奇怪字元（ex:中文）'
            QtWidgets.QMessageBox.information(None, 'Read Me', Error_Text)


    #<-- tab 被點擊 -->#
    def handle_tabbar_clicked(self, index):
        self.state = index + 1
        self.photol_1.setPixmap(QtGui.QPixmap(''))
        self.photol_2.setPixmap(QtGui.QPixmap(''))
        self.photol_3.setPixmap(QtGui.QPixmap(''))
        self.photol_4.setPixmap(QtGui.QPixmap(''))
        self.photol_5.setPixmap(QtGui.QPixmap(''))
        self.photol_1.setPixmap(QtGui.QPixmap(''))
        self.photol_6.setPixmap(QtGui.QPixmap(''))
        self.photol_7.setPixmap(QtGui.QPixmap(''))
        self.photol_8.setPixmap(QtGui.QPixmap(''))
        self.label_photo_1.setText('')
        self.label_photo_2.setText('')
        self.label_photo_3.setText('')
        self.label_photo_4.setText('')
        self.label_photo_5.setText('')
        self.label_photo_6.setText('')
        self.label_photo_7.setText('')
        self.label_photo_8.setText('')
        self.label_show_time.setText('')

        # filters --> 1
        # edge --> 2
        # hist --> 3
        # print(index)

    #<-- button readme clicked -->#
    def button_readme_clicked(self):
        if (self.state == 1):
            Readme_Text = '1. 請先按下Read image的按鈕\n2. 調整下面參數\n3. 按下show的按鈕'
        if (self.state == 2):
            Readme_Text = '1. 請先按下Read image的按鈕\n2. 調整下面參數\n3. 按下show的按鈕'
        if (self.state == 3):
            Readme_Text = '1. 請先按下Read image的按鈕\n2. 調整下面參數\n3. 按下show的按鈕'
        QtWidgets.QMessageBox.information(None, 'Read Me', Readme_Text)
    
    #<-- Slider size -->#
    def Slider_value_changed(self):
        if (self.state == 1):
            self.Slider_size_val =  self.slider_size_filter.value() * 2 + 1
            self.Slider_sigma_val = self.slider_sigma_filter.value()
            self.label_size_filter.setText('Size = ' + str(self.Slider_size_val) + 'X' + str(self.Slider_size_val))
            self.label_sigma_filter.setText('Sigma = ' + str(self.Slider_sigma_val))
        if (self.state == 2):
            self.Slider_size_val =  self.slider_size_edge.value() * 2 + 1
            self.Slider_sigma_val = self.slider_sigma_edge.value()
            self.label_size_edge.setText('Size = ' + str(self.Slider_size_val) + 'X' + str(self.Slider_size_val))
            self.label_sigma_edge.setText('Sigma = ' + str(self.Slider_sigma_val))
        if (self.state == 3):
            self.Slider_size_val =  self.slider_size_hist.value() * 2 + 1
            self.label_size_hist.setText('Size = ' + str(self.Slider_size_val) + 'X' + str(self.Slider_size_val))
            self.Slider_sigma_val = 1

        print((self.Slider_size_val, self.Slider_sigma_val))
        self.kernel_size = (self.Slider_size_val, self.Slider_size_val)



    #<-- button show clicked -->#
    def button_show_clicked(self):
        if (self.state == 1): # Run filters 並秀出儲存好的照片
            time_text = run_modle(self.im, 'filters', self.kernel_size, self.Slider_sigma_val)
            # self.photol_1.setPixmap(QtGui.QPixmap('log/filter_avg.jpg'))
            # self.photol_1.setScaledContents(True)
            # self.label_photo_1.setText('Average')

            self.photol_1.setPixmap(QtGui.QPixmap('log/filter_box.jpg'))
            self.photol_1.setScaledContents(True)
            self.label_photo_1.setText('Box')

            self.photol_2.setPixmap(QtGui.QPixmap('log/filter_gau.jpg'))
            self.photol_2.setScaledContents(True)
            self.label_photo_2.setText('Gauss')

        if (self.state == 2): # Run edge 並秀出儲存好的照片
            time_text = run_modle(self.im, 'edge', self.kernel_size, self.Slider_sigma_val)
            self.photol_1.setPixmap(QtGui.QPixmap('log/edge_LoG.jpg'))
            self.photol_1.setScaledContents(True)
            self.label_photo_1.setText('LoG ' + str(self.Slider_size_val) + 'x' + str(self.Slider_size_val) + 'sigma = ' + str(self.Slider_sigma_val))
            self.photol_2.setPixmap(QtGui.QPixmap('log/edge_MH.jpg'))
            self.photol_2.setScaledContents(True)
            self.label_photo_2.setText('Marr Hildreth ' + str(self.Slider_size_val) + 'x' + str(self.Slider_size_val) + 'sigma = ' + str(self.Slider_sigma_val))
            self.photol_6.setPixmap(QtGui.QPixmap('log/edge_sobel_3x3.jpg'))
            self.photol_6.setScaledContents(True)
            self.label_photo_6.setText('sobel 3x3')
            self.photol_7 .setPixmap(QtGui.QPixmap('log/edge_sobelX_3x3.jpg'))
            self.photol_7.setScaledContents(True)
            self.label_photo_7.setText('sobel x 3x3')
            self.photol_3.setPixmap(QtGui.QPixmap('log/edge_sobelY_3x3.jpg'))
            self.photol_3.setScaledContents(True)
            self.label_photo_3.setText('sobel y 3x3')
            self.photol_4.setPixmap(QtGui.QPixmap('log/edge_sobelX.jpg'))
            self.photol_4.setScaledContents(True)
            self.label_photo_4.setText('sobel x ' + str(self.Slider_size_val) + 'x' + str(self.Slider_size_val))
            self.photol_5.setPixmap(QtGui.QPixmap('log/edge_sobelY.jpg'))
            self.photol_5.setScaledContents(True)
            self.label_photo_5.setText('sobel y '  + str(self.Slider_size_val) + 'x' + str(self.Slider_size_val))
            self.photol_8.setPixmap(QtGui.QPixmap('log/edge_sobel.jpg'))
            self.photol_8.setScaledContents(True)
            self.label_photo_8.setText('sobel '  + str(self.Slider_size_val) + 'x' + str(self.Slider_size_val))
        if (self.state == 3): # Run Local enhancement 並秀出儲存好的照片
            time_text = run_modle(self.im, 'hist', self.kernel_size, self.Slider_sigma_val)
            self.photol_1.setPixmap(QtGui.QPixmap('log/local_enhancement.jpg'))
            self.photol_1.setScaledContents(True)
            self.label_photo_1.setText('Lacal enhancement')

            self.photol_2.setPixmap(QtGui.QPixmap('log/equalization.jpg'))
            self.photol_2.setScaledContents(True)
            self.label_photo_2.setText('Equalization')
        # print(time_text)
        self.label_show_time.setText(time_text)

#<-- 影像處理 -->#
# padding and convolution --> https://medium.com/analytics-vidhya/2d-convolution-using-python-numpy-43442ff5f381
def convolve2D(image, kernel, padding = 0, strides = 1):
    # Cross Correlation
    kernel = np.flipud(np.fliplr(kernel))

    # Gather Shapes of Kernel + Image + Padding
    xKernShape = kernel.shape[0]
    yKernShape = kernel.shape[1]
    xImgShape = image.shape[0]
    yImgShape = image.shape[1]

    # Shape of Output Convolution
    xOutput = int(((xImgShape - xKernShape + 2 * padding) / strides) + 1)
    yOutput = int(((yImgShape - yKernShape + 2 * padding) / strides) + 1)
    output = np.zeros((xOutput, yOutput))

    # Apply Equal Padding to All Sides
    if padding != 0:
        imagePadded = np.zeros((image.shape[0] + padding*2, image.shape[1] + padding*2))
        imagePadded[int(padding):int(-1 * padding), int(padding):int(-1 * padding)] = image
        # print(imagePadded)
    else:
        imagePadded = image

    # Iterate through image
    for y in range(image.shape[1]):
        # Exit Convolution
        if y > image.shape[1] - yKernShape:
            break
        # Only Convolve if y has gone down by the specified Strides
        if y % strides == 0:
            for x in range(image.shape[0]):
                # Go to next row once kernel is out of bounds
                if x > image.shape[0] - xKernShape:
                    break
                try:
                    # Only Convolve if x has moved by the specified Strides
                    if x % strides == 0:
                        output[x, y] = (kernel * imagePadded[x: x + xKernShape, y: y + yKernShape]).sum()
                except:
                    break
    return imagePadded, output



# Generate average filters, size --> (3, 3) = 3x3; (5, 5) = 5x5 ... #####
def average_filters(size):
    h, w = size
    avg_f = np.ones((h, w)) / (h * w)
    return avg_f

# Generate gaussian filters #####
def Gaussian_filters(size, sigma):
    def Gaussian_op(x, y, sigma): # 建立運算fun
        result = 1 / (2 * math.pi * sigma**2) * math.exp(- (x**2 + y**2) / (2 * sigma**2))
        return result
    Gaussian = np.zeros(size)
    mask_h, mask_w = size
    for i in range(mask_h):
        for j in range(mask_w):
            Gaussian[i][j] = Gaussian_op(i - 1, j - 1, sigma)
    return Gaussian / np.sum(Gaussian)

# BGR 轉換到 RGB (matplot show use)#####
def BGR2RGB(img):
    RGB = np.zeros(img.shape)
    print(RGB.shape)
    RGB[:, :, 0] = img[:, :, 2]
    RGB[:, :, 1] = img[:, :, 1]
    RGB[:, :, 2] = img[:, :, 0]
    return RGB

def edgesMarrHildreth1(img, sigma, mask_size):
    """
            finds the edges using MarrHildreth edge detection method...
            :param im : input image
            :param sigma : sigma is the std-deviation and refers to the spread of gaussian
            :return:
            a binary edge image...
    """
    start_time = time.time()
    # st.write(img.shape[0])
    # size = int(2*(np.ceil(3*sigma))+1)
    size = mask_size
    # print(size)

    x, y = np.meshgrid(np.arange(-size/2+1, size/2+1),
                       np.arange(-size/2+1, size/2+1))

    normal = 1 / (2.0 * np.pi * sigma**2)

    kernel = ((x**2 + y**2 - (2.0*sigma**2)) / sigma**4) * \
        np.exp(-(x**2+y**2) / (2.0*sigma**2)) / normal  # LoG filter

    kern_size = kernel.shape[0]
    # st.write(x)
    # st.write(y)
    log = np.zeros_like(img, dtype=float)

    # applying filter O
    for k in range(1):
        for i in range(img.shape[0]-(kern_size-1)):
            for j in range(img.shape[1]-(kern_size-1)):
                window = img[i:i+kern_size, j:j+kern_size, k] * kernel
                log[i, j, k] = np.sum(window)
            


    log = log.astype(np.int64, copy=False)
    log_time = time.time() - start_time
    zero_crossing = np.zeros_like(log)

    # computing zero crossing O
    for k in range(log.shape[2]):
        for i in range(log.shape[0]-(kern_size-1)):
            for j in range(log.shape[1]-(kern_size-1)):
                if log[i][j][k] == 0:
                    if (log[i][j-1][k] < 0 and log[i][j+1][k] > 0) or (log[i][j-1][k] < 0 and log[i][j+1][k] < 0) or (log[i-1][j][k] < 0 and log[i+1][j][k] > 0) or (log[i-1][j][k] > 0 and log[i+1][j][k] < 0):
                        zero_crossing[i][j][k] = 255
                if log[i][j][k] < 0:
                    if (log[i][j-1][k] > 0) or (log[i][j+1][k] > 0) or (log[i-1][j][k] > 0) or (log[i+1][j][k] > 0):
                        zero_crossing[i][j][k] = 255
    MH_time = time.time() - start_time

    return log, log_time, zero_crossing, MH_time

# MarrHildreth edges
def edgesMarrHildreth(img, sigma, mask_size):
    start_time = time.time()
    size, ret = mask_size
    # print(size)
    x, y = np.meshgrid(np.arange(-size/2+1, size/2+1),
                       np.arange(-size/2+1, size/2+1))

    normal = 1 / (2.0 * np.pi * sigma**2)

    kernel = ((x**2 + y**2 - (2.0*sigma**2)) / sigma**4) * \
        np.exp(-(x**2+y**2) / (2.0*sigma**2)) / normal  # LoG filter

    kern_size = kernel.shape[0]
 
    log = np.zeros_like(img, dtype=float)

    # applying filter O
    for i in range(img.shape[0]-(kern_size-1)):
        for j in range(img.shape[1]-(kern_size-1)):
            window = img[i:i+kern_size, j:j+kern_size] * kernel
            log[i, j] = np.sum(window)

    log = log.astype(np.int64, copy=False)
    log_time = time.time() - start_time
    zero_crossing = np.zeros_like(log)

    # computing zero crossing O
    for i in range(log.shape[0]-(kern_size-1)):
        for j in range(log.shape[1]-(kern_size-1)):
            if log[i][j] == 0:
                if (log[i][j-1] < 0 and log[i][j+1] > 0) or (log[i][j-1] < 0 and log[i][j+1] < 0) or (log[i-1][j] < 0 and log[i+1][j] > 0) or (log[i-1][j] > 0 and log[i+1][j] < 0):
                    zero_crossing[i][j] = 255
            if log[i][j] < 0:
                if (log[i][j-1] > 0) or (log[i][j+1] > 0) or (log[i-1][j] > 0) or (log[i+1][j] > 0):
                    zero_crossing[i][j] = 255
    MH_time = time.time() - start_time
    return log, log_time, zero_crossing, MH_time

# histogram equalization
def cal_hist(matrix):
    hist = np.zeros(256)
    h, w = matrix.shape
    for i in range(256):
        count = 0
        for j in range(h):
            for k in range(w):
                if (i == matrix[j][k]):
                    count += 1
        hist[i] = count
    return hist
def cal_probability(img): # probability
    h, w = img.shape
    area  = h * w
    hist = cal_hist(img)
    p = hist / area
    return p
def cal_Cumulative_probability(p): # Cumulative_probability
    CP = np.zeros(len(p))
    count = 0
    for index, value in enumerate(p):
        count += value
        CP[index] = count * 255
    return CP
def equalization(img):
    CP = cal_Cumulative_probability(cal_probability(img))
    h, w = img.shape
    equalization_img = np.zeros(img.shape)
    for i in range(h):
        for j in range(w):
            equalization_img[i][j] = CP[int(img[i][j])]
    return equalization_img

# local enhancement
def local_enhancement(img):
    im = img
    img_h, img_w = im.shape

    # 機率
    p = np.zeros(256)
    # print(p)
    for sample in range(256):
        count = 0
        for i in range(img_h):
            for j in range(img_w):
                if (im[i][j] == sample):
                    count += 1
        p[sample] = count / img_h / img_w
    # print(p)

    # 平均
    m = 0
    for i in range(256):
        m += i * p[i]
    # u2 
    u2 = 0
    for i in range(256):
        u2 += (i - m)**2 * p[i]
    # print(u2)
    # print(np.var(im))

    # 反射padding #### 根據kernel size去改
    im_padded =  cv2.copyMakeBorder(im, 1,1,1,1, cv2.BORDER_CONSTANT, value=0)
    # 計算區域的統計 --> 3x3
    # C = 4, k0 = 0.02, k1 = 0.4, k2 = 0.02, k3 = 0.4
    im_result = np.zeros(im.shape)
    C, k0, k1, k2, k3 = (100, 0, 0.25, 0, 0.1)
    for i in range(1, im_padded.shape[0] - 1):
        for j  in range(1, im_padded.shape[1] - 1):
            m_sy = np.average(im_padded[i - 1:i + 1, j - 1: j + 1])
            var_xy = np.var(im_padded[i - 1:i + 1, j - 1: j + 1])
            if ((k0 * m < m_sy and m_sy < k1 * m) and (k2 * u2 < var_xy and var_xy < k3 * u2)):
                im_result[i - 1][j - 1] = C * im[i - 1][j - 1]
                print(1)
            else:
                im_result[i - 1][j - 1] = im[i - 1][j - 1]
    return im_result

# local eqaul
def local_eqaul(img, size):
    (row, col) = img.shape
    kernel_size, ret = size
    result = np.zeros([row, col])
    if (kernel_size % 2 == 0): 
        kernel_size += 1
    area = kernel_size**2 # 方陣面積平方
    hsize = kernel_size // 2
    for i in range(hsize, (row - hsize)):
        for j in range(hsize, (col - hsize)):
            rank = 0
            for k in range(i-hsize, (i+hsize+1)):
                for l in range(j-hsize, (j+hsize+1)):
                    if (img[i][j] > img[k][l]):
                        rank += 1
            result[i][j] = rank * 255 / area
    return result


# run function #####
def run_mod1e(img, kernel_name, kernel_size, sigma = 1):
    padding = int((kernel_size - 1) / 2)
    # print(padding)
    kernel_size = (kernel_size, kernel_size)
    
    if (kernel_name == 'box'): # 均值濾波
        filters = average_filters(kernel_size)
    if (kernel_name == 'gaussian'):
        filters = Gaussian_filters(kernel_size, sigma)

    padded, result = convolve2D(img, filters, padding = padding)
    return padded, result

# run function
def run_modle(im, method, kernel_size, sigma):
    if (method == 'filters'):
        # avg
        avg_start = time.time()
        avg = cv2.blur(im, kernel_size) # 平均
        avg_during = time.time() - avg_start

        # box
        box_start = time.time()
        box = cv2.boxFilter(im, -1, kernel_size, normalize=True) # box
        box_during = time.time() - box_start

        # gau
        gau_start = time.time()
        gau = cv2.GaussianBlur(im, kernel_size, sigma)
        gau_during = time.time() - gau_start
        print(123)
        cv2.imwrite('log/filter_avg.jpg', avg)
        cv2.imwrite('log/filter_box.jpg', box)
        cv2.imwrite('log/filter_gau.jpg', gau)
        time_text = 'Average filter used :'  + str(avg_during) + 's\n' + \
                    'Box filter used:' + str(box_during) + 's\n' + \
                    'Gaussian filter used:' + str(gau_during) + 's'
        # print(time_text)
    if (method == 'edge'):
        log, log_time, zero_crossing, MH_time = edgesMarrHildreth(im, sigma, kernel_size)
        sobel_x_start_time = time.time()
        sobelX = cv2.Sobel(im, cv2.CV_64F, 1, 0, ksize=kernel_size[0])
        sobelX = np.uint8(np.absolute(sobelX))
        sobel_x_time = time.time() - sobel_x_start_time

        sobel_y_start_time = time.time()
        sobelY = cv2.Sobel(im, cv2.CV_64F, 0, 1, ksize=kernel_size[0])
        sobelY = np.uint8(np.absolute(sobelY))
        sobel_y_time = time.time() - sobel_y_start_time

        sobelCombined = cv2.bitwise_or(sobelX, sobelY)
        sobel_xy_time = time.time() - sobel_x_start_time

        sobelX_3x3 = cv2.Sobel(im, cv2.CV_64F, 1, 0, ksize = 3)
        sobelX_3x3 = np.uint8(np.absolute(sobelX_3x3))

        sobelY_3x3 = cv2.Sobel(im, cv2.CV_64F, 0, 1, ksize = 3)
        sobelY_3x3 = np.uint8(np.absolute(sobelY_3x3))

        sobelCombined_3x3 = cv2.bitwise_or(sobelX_3x3, sobelY_3x3)

        cv2.imwrite('log/edge_LoG.jpg', log)
        cv2.imwrite('log/edge_MH.jpg', zero_crossing)
        cv2.imwrite('log/edge_sobelX.jpg', sobelX)
        cv2.imwrite('log/edge_sobelY.jpg', sobelY)
        cv2.imwrite('log/edge_sobel.jpg', sobelCombined)
        cv2.imwrite('log/edge_sobelX_3x3.jpg', sobelX_3x3)
        cv2.imwrite('log/edge_sobelY_3x3.jpg', sobelY_3x3)
        cv2.imwrite('log/edge_sobel_3x3.jpg', sobelCombined_3x3)

        time_text = 'LoG used :'  + str(log_time) + 's\n' + \
                    'Marr-Hildreth used:' + str(MH_time) + 's\n' + \
                    'sobel x used:' + str(sobel_x_time) + 's\n' + \
                    'sobel y used:' + str(sobel_y_time) + 's\n' + \
                    'sobel x and y used:' + str(sobel_xy_time) + 's'
        
    if (method == 'hist'):
        local_enhancement_time_start = time.time()
        # img_local_enhancement = local_enhancement(im)
        img_local_enhancement = local_eqaul(im, kernel_size)
        local_enhancement_time = time.time() - local_enhancement_time_start

        img_equalization_time_start = time.time()
        img_equalization = equalization(im)
        img_equalization_time = time.time() - img_equalization_time_start

        cv2.imwrite('log/local_enhancement.jpg', img_local_enhancement)
        cv2.imwrite('log/equalization.jpg', img_equalization)
        
        time_text = 'Local enhancement used :'  + str(local_enhancement_time) + 's\n' + \
                    'Hist equalization used:' + str(img_equalization_time) + 's'
        
    return time_text




# 檢查log 資料夾是否存在
def check_log():
    dir = os.listdir()
    if("log" not in dir):
        os.system("mkdir log")

if __name__ == "__main__":
    check_log()
    app = QtWidgets.QApplication(sys.argv)
    mainwindow = QtWidgets.QWidget()
    ui = Ui_mainwindow()
    ui.setupUi(mainwindow)
    mainwindow.show()
    sys.exit(app.exec())
