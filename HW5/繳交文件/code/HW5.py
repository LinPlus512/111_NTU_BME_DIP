# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt6 import QtCore, QtGui, QtWidgets
import cv2
from matplotlib.colors import ListedColormap, LinearSegmentedColormap
from matplotlib import pyplot as plt
import numpy as np


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1080, 768)
        font = QtGui.QFont()
        font.setFamily("Arial")
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 1060, 758))
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.TabPosition.North)
        self.tabWidget.setObjectName("tabWidget")

# init parameter
        self.state = 3

#<-----tab 1----->#
        self.tab_1 = QtWidgets.QWidget()
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.tab_1.setFont(font)
        self.tab_1.setObjectName("tab_1")

        self.btn_openFile_1 = QtWidgets.QPushButton(self.tab_1)
        self.btn_openFile_1.setGeometry(QtCore.QRect(10, 10, 256, 32))
        self.btn_openFile_1.setObjectName("btn_openFile_1")
        self.btn_openFile_1.clicked.connect(self.btn_openFile_clicked)

        self.lb_show_origin_1 = QtWidgets.QLabel(self.tab_1)
        self.lb_show_origin_1.setGeometry(QtCore.QRect(10, 60, 256, 256))
        self.lb_show_origin_1.setObjectName("lb_show_origin_1")

        self.comboBox = QtWidgets.QComboBox(self.tab_1)
        self.comboBox.setGeometry(QtCore.QRect(10, 340, 256, 26))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItems(['RGB', 'CMY', 'HSI', 'XYZ', 'L*a*b*', 'YUV'])
        self.comboBox.setCurrentIndex(0) # 起始 index = 0
        # print('打開時的index-->', self.comboBox.currentIndex()) # 打開時會是 0，選項會在ＲＧＢ

        self.btn_result_1 = QtWidgets.QPushButton(self.tab_1)
        self.btn_result_1.setGeometry(QtCore.QRect(10, 380, 256, 32))
        self.btn_result_1.setObjectName("btn_result_1")
        self.btn_result_1.clicked.connect(self.btn_result_clicked)

        self.lb_result_1 = QtWidgets.QLabel(self.tab_1)
        self.lb_result_1.setGeometry(QtCore.QRect(330, 10, 256, 256))
        self.lb_result_1.setObjectName("lb_result_1")

        self.lb_result_2 = QtWidgets.QLabel(self.tab_1)
        self.lb_result_2.setGeometry(QtCore.QRect(600, 10, 256, 256))
        self.lb_result_2.setObjectName("lb_result_2")

        self.lb_result_3 = QtWidgets.QLabel(self.tab_1)
        self.lb_result_3.setGeometry(QtCore.QRect(330, 280, 256, 256))
        self.lb_result_3.setObjectName("lb_result_3")

        self.lb_result_4 = QtWidgets.QLabel(self.tab_1)
        self.lb_result_4.setGeometry(QtCore.QRect(600, 280, 256, 256))
        self.lb_result_4.setObjectName("lb_result_4")

        self.lb_noise = QtWidgets.QLabel(self.tab_1)
        self.lb_noise.setGeometry(QtCore.QRect(330, 550, 256, 256))
        lb_noise = ''
        font_noise = QtGui.QFont()
        font_noise.setPixelSize(24)
        self.lb_noise.setFont(font_noise)
        self.lb_noise.setText(lb_noise)
    

        self.tabWidget.addTab(self.tab_1, "")

#<-----tab 2----->#
        self.tab_2 = QtWidgets.QWidget()
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.tab_2.setFont(font)
        self.tab_2.setObjectName("tab_2")

        self.btn_openFile_2 = QtWidgets.QPushButton(self.tab_2)
        self.btn_openFile_2.setGeometry(QtCore.QRect(10, 10, 256, 32))
        self.btn_openFile_2.setObjectName("btn_openFile_2")
        self.btn_openFile_2.clicked.connect(self.btn_openFile_clicked)

        self.lb_show_origin_2 = QtWidgets.QLabel(self.tab_2)
        self.lb_show_origin_2.setGeometry(QtCore.QRect(10, 60, 256, 256))
        self.lb_show_origin_2.setObjectName("lb_show_origin_2")

        self.btn_color_1 = QtWidgets.QPushButton(self.tab_2)
        self.btn_color_1.setGeometry(QtCore.QRect(10, 330, 113, 32))
        self.btn_color_1.setObjectName("btn_color_1")
        self.btn_color_1.clicked.connect(self.btn_color_clicked_1)
        
        self.lb_color_1 = QtWidgets.QLabel(self.tab_2)
        self.lb_color_1.setGeometry(QtCore.QRect(130, 330, 60, 32))
        self.lb_color_1.setObjectName("lb_color_1")
        r, g, b = 0, 0, 0        
        strRGB = ('{:^3d}, {:^3d}, {:^3d}'.format(r, g, b))
        self.lb_color_1.setStyleSheet('background-color:rgb({});'.format(strRGB))

        self.btn_color_2 = QtWidgets.QPushButton(self.tab_2)
        self.btn_color_2.setGeometry(QtCore.QRect(10, 360, 113, 32))
        self.btn_color_2.setObjectName("btn_color_2")
        self.btn_color_2.clicked.connect(self.btn_color_clicked_2)

        self.lb_color_2 = QtWidgets.QLabel(self.tab_2)
        self.lb_color_2.setGeometry(QtCore.QRect(130, 360, 60, 32))
        self.lb_color_2.setObjectName("lb_color_2")
        self.lb_color_2.setStyleSheet('background-color:rgb({});'.format(strRGB))   

        self.btn_color_3 = QtWidgets.QPushButton(self.tab_2)
        self.btn_color_3.setGeometry(QtCore.QRect(10, 390, 113, 32))
        self.btn_color_3.setObjectName("btn_color_3")
        self.btn_color_3.clicked.connect(self.btn_color_clicked_3)

        self.lb_color_3 = QtWidgets.QLabel(self.tab_2)
        self.lb_color_3.setGeometry(QtCore.QRect(130, 390, 60, 32))
        self.lb_color_3.setObjectName("lb_color_3")
        self.lb_color_3.setStyleSheet('background-color:rgb({});'.format(strRGB))   

        self.btn_result_2 = QtWidgets.QPushButton(self.tab_2)
        self.btn_result_2.setGeometry(QtCore.QRect(10, 440, 256, 32))
        self.btn_result_2.setObjectName("btn_result_2")
        self.btn_result_2.clicked.connect(self.btn_result_clicked)

        self.lb_colorBar = QtWidgets.QLabel(self.tab_2)
        self.lb_colorBar.setGeometry(QtCore.QRect(10, 470, 256, 32))
        self.lb_colorBar.setObjectName("lb_colorBar")

        self.lb_result_tab2 = QtWidgets.QLabel(self.tab_2)
        self.lb_result_tab2.setGeometry(QtCore.QRect(320, 10, 512, 512))
        self.lb_result_tab2.setObjectName("lb_result_tab2")

        self.tabWidget.addTab(self.tab_2, "")

#<-----tab 3----->#
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")

        self.btn_openFile_3 = QtWidgets.QPushButton(self.tab_3)
        self.btn_openFile_3.setGeometry(QtCore.QRect(10, 10, 256, 32))
        self.btn_openFile_3.setObjectName("btn_openFile_3")
        self.btn_openFile_3.clicked.connect(self.btn_openFile_clicked)

        self.lb_show_origin_3 = QtWidgets.QLabel(self.tab_3)
        self.lb_show_origin_3.setGeometry(QtCore.QRect(10, 60, 256, 256))
        self.lb_show_origin_3.setObjectName("lb_show_origin_3")

        self.horizontalSlider = QtWidgets.QSlider(self.tab_3)
        self.horizontalSlider.setGeometry(QtCore.QRect(10, 330, 160, 22))
        self.horizontalSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.setMaximum(10)
        self.horizontalSlider.setMinimum(0)
        self.K_val = 0
        self.horizontalSlider.valueChanged.connect(self.getslidervalue)

        self.lb_Kval = QtWidgets.QLabel(self.tab_3)
        self.lb_Kval.setGeometry(QtCore.QRect(180, 330, 60, 22))
        self.lb_Kval.setObjectName("lb_Kval")
        self.lb_Kval.setText('K=' + str(self.K_val))

        self.btn_result_3 = QtWidgets.QPushButton(self.tab_3)
        self.btn_result_3.setGeometry(QtCore.QRect(10, 370, 256, 32))
        self.btn_result_3.setObjectName("btn_result_3")
        self.btn_result_3.clicked.connect(self.btn_result_clicked)

        self.lb_result_tab3_1 = QtWidgets.QLabel(self.tab_3)
        self.lb_result_tab3_1.setGeometry(QtCore.QRect(330, 10, 256, 256))
        self.lb_result_tab3_1.setObjectName("lb_result_tab3_1")

        self.lb_result_tab3_2 = QtWidgets.QLabel(self.tab_3)
        self.lb_result_tab3_2.setGeometry(QtCore.QRect(600, 10, 256, 256))
        self.lb_result_tab3_2.setObjectName("lb_result_tab3_2")

        self.lb_result_tab3_3 = QtWidgets.QLabel(self.tab_3)
        self.lb_result_tab3_3.setGeometry(QtCore.QRect(330, 280, 256, 256))
        self.lb_result_tab3_3.setObjectName("lb_result_tab3_3")

        self.lb_result_tab3_4 = QtWidgets.QLabel(self.tab_3)
        self.lb_result_tab3_4.setGeometry(QtCore.QRect(600, 280, 256, 256))
        self.lb_result_tab3_4.setObjectName("lb_result_tab3_4")

        self.tabWidget.addTab(self.tab_3, "")
        self.tabWidget.tabBarClicked.connect(self.tabbar_clicked)

        # MainWindow.setCentralWidget(self.centralwidget)
        # self.menubar = QtWidgets.QMenuBar(MainWindow)
        # self.menubar.setGeometry(QtCore.QRect(0, 0, 1080, 24))
        # self.menubar.setObjectName("menubar")
        # MainWindow.setMenuBar(self.menubar)
        # self.statusbar = QtWidgets.QStatusBar(MainWindow)
        # self.statusbar.setObjectName("statusbar")
        # MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "R11631029-HW5"))
        self.btn_openFile_1.setText(_translate("MainWindow", "Open File"))
        self.lb_show_origin_1.setText(_translate("MainWindow", ""))
        self.btn_result_1.setText(_translate("MainWindow", "Show Result"))
        self.lb_result_1.setText(_translate("MainWindow", ""))
        self.lb_result_2.setText(_translate("MainWindow", ""))
        self.lb_result_3.setText(_translate("MainWindow", ""))
        self.lb_result_4.setText(_translate("MainWindow", ""))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_1), _translate("MainWindow", "Color Model Conversion"))
        self.btn_openFile_2.setText(_translate("MainWindow", "Open File"))
        self.lb_show_origin_2.setText(_translate("MainWindow", ""))
        self.btn_color_1.setText(_translate("MainWindow", "color 1"))
        self.lb_color_1.setText(_translate("MainWindow", ""))
        self.btn_color_2.setText(_translate("MainWindow", "color 2"))
        self.lb_color_2.setText(_translate("MainWindow", ""))
        self.btn_color_3.setText(_translate("MainWindow", "color 3"))
        self.lb_color_3.setText(_translate("MainWindow", ""))
        self.btn_result_2.setText(_translate("MainWindow", "Show Result"))
        self.lb_colorBar.setText(_translate("MainWindow", ""))
        self.lb_result_tab2.setText(_translate("MainWindow", ""))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Pseudo-color Image"))
        self.btn_openFile_3.setText(_translate("MainWindow", "Open File"))
        self.lb_show_origin_3.setText(_translate("MainWindow", ""))
        # self.lb_Kval.setText(_translate("MainWindow", ""))
        self.btn_result_3.setText(_translate("MainWindow", "Show Result"))
        self.lb_result_tab3_1.setText(_translate("MainWindow", ""))
        self.lb_result_tab3_2.setText(_translate("MainWindow", ""))
        self.lb_result_tab3_3.setText(_translate("MainWindow", ""))
        self.lb_result_tab3_4.setText(_translate("MainWindow", ""))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Color Segmentation"))
    
    # tabbar_clicked
    def tabbar_clicked(self, index):
        self.state = index + 1
        '''
        self.state = 1 --> color plane change
        self.state = 2 --> fake color image
        self.state = 3 --> Kmeans
        '''
        # print('check tab changed or not -->', self.state)

    # btn_openFile clicked
    def btn_openFile_clicked(self):
        try:
            self.image_path, ret= QtWidgets.QFileDialog.getOpenFileName()

            if (self.state == 1):
                self.im = cv2.imread(self.image_path) 
                self.lb_show_origin_1.setPixmap(QtGui.QPixmap(self.image_path))
                self.lb_show_origin_1.setScaledContents(True)
            elif (self.state == 2):
                self.im = cv2.imread(self.image_path, 0) 
                self.lb_show_origin_2.setPixmap(QtGui.QPixmap(self.image_path))
                self.lb_show_origin_2.setScaledContents(True)
            else:
                self.im = cv2.imread(self.image_path) 
                self.lb_show_origin_3.setPixmap(QtGui.QPixmap(self.image_path))
                self.lb_show_origin_3.setScaledContents(True)
            # print(image_path) 
        except:
            Error_Text = '請重新讀檔，並確認路徑不存在奇怪字元（ex:中文）'
            QtWidgets.QMessageBox.information(None, 'Read Me', Error_Text)
    
    # show image by array in pyqt6
    def array2pixmap(self, img):
            # Use: label.setPixmap(result)
            # img = img.astype('float32')
            if len(img.shape) < 3:
                frame = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            else:
                frame = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            h, w = img.shape[:2]
            bytesPerLine = 3 * w
            qimage = QtGui.QImage(frame.data, w, h, bytesPerLine, QtGui.QImage.Format.Format_RGB888) 
            result  = QtGui.QPixmap(qimage)
            return result

        # show_img = array2pixmap(cmap)
        # label.setPixmap(show_img)

    # btn_result_clicked
    def btn_result_clicked(self):
        if (self.state == 1):
            print('Using the color plane change ...')
            combo_val = int(self.comboBox.currentIndex()) + 1
            # print('combo value -->', combo_val)
            '''
            |id|plane|
            |---|---|
            |1|RGB|
            |2|CMY|
            |3|HSI|
            |4|XYZ|
            |5|Lab|
            |6|YUV|
            '''
            im = self.im.astype('float32') / 255
            im_R = im[:, :, 2]
            im_G = im[:, :, 1]
            im_B = im[:, :, 0]
            # print(im_R.shape)
            
            if (combo_val == 1):
                result_2, result_3, result_4 = RGB(im_R, im_G, im_B)
                lb_noise = '|O|R|\n|G|B|'
            if (combo_val == 2):
                result_2, result_3, result_4 = CMY(im_R, im_G, im_B)
                lb_noise = '|O|C|\n|M|Y|'
            if (combo_val == 3):
                result_2, result_3, result_4 = HSI(im_R, im_G, im_B)
                lb_noise = '|O|H|\n|S| I |'
            if (combo_val == 4):
                result_2, result_3, result_4 = XYZ(im_R, im_G, im_B)
                lb_noise = '|O|X|\n|Y|Z|'
            if (combo_val == 5):
                result_2, result_3, result_4 = Lab(im_R, im_G, im_B)
                lb_noise = '|O |L*|\n|a*|b*|'
            if (combo_val == 6):
                result_2, result_3, result_4 = YUV(im_R, im_G, im_B)
                lb_noise = '|O|Y|\n|U|V|'
            result_1 = im * 255
            result_2 = result_2 * 255
            result_3 = result_3 * 255
            result_4 = result_4 * 255
            putText_onImg(result_1, 'Origin')

            self.lb_result_1.setPixmap(self.array2pixmap(result_1.astype('uint8')))
            self.lb_result_1.setScaledContents(True)
            self.lb_result_2.setPixmap(self.array2pixmap(result_2.astype('uint8')))
            self.lb_result_2.setScaledContents(True)
            self.lb_result_3.setPixmap(self.array2pixmap(result_3.astype('uint8')))
            self.lb_result_3.setScaledContents(True)
            self.lb_result_4.setPixmap(self.array2pixmap(result_4.astype('uint8')))
            self.lb_result_4.setScaledContents(True)
            self.lb_noise.setText(lb_noise)


        if (self.state == 2):
            # creat color array for function
            try:
                r1 = self.color_1.red()
                g1 = self.color_1.green()
                b1 = self.color_1.blue()
            except: 
                r1 = b1 = g1 = 0
            try:
                r2 = self.color_2.red()
                g2 = self.color_2.green()
                b2 = self.color_2.blue()
            except: 
                r2 = b2 = g2 = 0
            try:
                r3 = self.color_3.red()
                g3 = self.color_3.green()
                b3 = self.color_3.blue()
            except: 
                r3 = b3 = g3 = 0
            colorarray = [[r1 / 255, g1 / 255, b1 / 255, 1],
                          [r2 / 255, g2 / 255, b2 / 255, 1],
                          [r3 / 255, g3 / 255, b3 / 255, 1]]
            result, colorbar = fake_color(self.im, colorarray)

            self.lb_colorBar.setPixmap(self.array2pixmap(colorbar.astype('uint8')))
            self.lb_colorBar.setScaledContents(True)
            self.lb_result_tab2.setPixmap(self.array2pixmap(result.astype('uint8')))
            self.lb_result_tab2.setScaledContents(True)

        if (self.state == 3):
            BGR, hsi, LAB = Kmeans(self.im, self.K_val)
            self.im = putText_onImg(self.im, 'Origin')
            result_1 = putText_onImg(BGR, 'RGB')

            result_2 = putText_onImg(cv2.cvtColor(hsi, cv2.COLOR_RGB2BGR), "HSI")

            result_3 = putText_onImg(cv2.cvtColor(LAB, cv2.COLOR_RGB2BGR), "L*a*b*")
            self.lb_result_tab3_1.setPixmap(self.array2pixmap(self.im.astype('uint8')))
            self.lb_result_tab3_1.setScaledContents(True)
            self.lb_result_tab3_2.setPixmap(self.array2pixmap(result_1.astype('uint8')))
            self.lb_result_tab3_2.setScaledContents(True)
            self.lb_result_tab3_3.setPixmap(self.array2pixmap(result_2.astype('uint8')))
            self.lb_result_tab3_3.setScaledContents(True)
            self.lb_result_tab3_4.setPixmap(self.array2pixmap(result_3.astype('uint8')))
            self.lb_result_tab3_4.setScaledContents(True)

    # 呼叫顏色
    def btn_color_clicked_1(self):
        self.color_1 = QtWidgets.QColorDialog.getColor()
        color = self.color_1
        # print(color.red())
        # print(color.green())
        # print(color.blue())
        r, g, b = color.red(), color.green(), color.blue()        
        strRGB = ('{:^3d}, {:^3d}, {:^3d}'.format(r, g, b))
        self.lb_color_1.setStyleSheet('background-color:rgb({});'.format(strRGB))
    def btn_color_clicked_2(self):
        self.color_2 = QtWidgets.QColorDialog.getColor()
        color = self.color_2
        # print(color.red())
        # print(color.green())
        # print(color.blue())
        r, g, b = color.red(), color.green(), color.blue()        
        strRGB = ('{:^3d}, {:^3d}, {:^3d}'.format(r, g, b))
        self.lb_color_2.setStyleSheet('background-color:rgb({});'.format(strRGB))
    def btn_color_clicked_3(self):
        self.color_3 = QtWidgets.QColorDialog.getColor()
        color = self.color_3
        # print(color.red())
        # print(color.green())
        # print(color.blue())
        r, g, b = color.red(), color.green(), color.blue()        
        strRGB = ('{:^3d}, {:^3d}, {:^3d}'.format(r, g, b))
        self.lb_color_3.setStyleSheet('background-color:rgb({});'.format(strRGB))

    # slider value --> Kmeans value
    def getslidervalue(self):        
        self.K_val = self.horizontalSlider.value()
        self.lb_Kval.setText('K=' + str(self.K_val))
        # print(self.K_val)


# Function for image processing
#<----- color plane change (start) ----->#
def putText_onImg(im, text):
    # font
    font = cv2.FONT_HERSHEY_SIMPLEX
    
    # org
    org = (100, 100)
    
    # fontScale
    fontScale = 3
    
    # Blue color in BGR
    color = (255, 0, 0)
    
    # Line thickness of 2 px
    thickness = 4
    
    # Using cv2.putText() method
    result = cv2.putText(im, text, org, font, 
                    fontScale, color, thickness, cv2.LINE_AA)
    return result

def RGB(r, g, b):
    return r, g, b

def CMY(r, g, b):
    c = np.ones(r.shape) - r
    m = np.ones(g.shape) - g
    y = np.ones(b.shape) - b

    return c, m, y

def HSI(r, g, b):
    high, width = r.shape
    h = np.zeros(r.shape)
    s = np.zeros(r.shape)
    for i in range(high):
        for j in range(width):
            theta = np.arccos(0.5 * (r[i, j] - g[i, j] + r[i, j] - b[i, j]) / ((r[i, j] - g[i, j])**2 + (r[i, j] - b[i, j]) * (g[i, j] - b[i, j]))**0.5)
            if (b[i, j] <= g[i, j]):
                h[i, j] = theta
            else:
                h[i, j] = 2 * np.pi - theta
            s[i, j] = 1 - 3 / (r[i, j] + g[i, j] + b[i, j]) * np.min([r[i, j], g[i, j], b[i, j]])

    i = (r + g + b) / 3

    return h, s, i

def XYZ(r, g, b):
    h, w = r.shape
    x = np.zeros(r.shape)
    y = np.zeros(r.shape)
    z = np.zeros(r.shape)
    T = np.array([[0.412453, 0.357580, 0.180423],
                  [0.212671, 0.715160, 0.072169],
                  [0.019334, 0.119193, 0.950227]])
    # print(T)
    for i in range(h):
        for j in range(w):
            rgb = np.array([[r[i, j]], [g[i, j]], [b[i, j]]])
            result = np.dot(T, rgb)
            x[i, j] = result[0]
            y[i, j] = result[1]
            z[i, j] = result[2]

    return x, y, z
  
def Lab(r, g, b):
    def h(q):
        if (q > 0.008856):
            return q**(1/3)
        else:
            return 7.787 * q + 16 / 116
    X, Y, Z = XYZ(r, g, b)
    L = np.zeros(X.shape)
    a = np.zeros(X.shape)
    b = np.zeros(X.shape)
    high, width = X.shape
    
    for i in range(high):
        for j in range(width):
            L[i, j] = 116 * h(Y[i, j] / 0.333) - 16
            a[i, j] = 500 * (h(X[i, j] / 0.333) - h(Y[i, j] / 0.333))
            b[i, j] = 200 * (h(Y[i, j] / 0.333) - h(Z[i, j] / 0.333))
    L = L / 255
    a = a / 255
    b = b / 255
    return L, a, b  

def YUV(r, g, b):
    h, w = r.shape
    y = np.zeros(r.shape)
    u = np.zeros(r.shape)
    v = np.zeros(r.shape)
    T = np.array([[0.257, 0.504, 0.098],
                  [-0.148, -0.291, 0.439],
                  [0.439, -0.368, -0.071]])
    # print(T)
    for i in range(h):
        for j in range(w):
            rgb = np.array([[r[i, j]], [g[i, j]], [b[i, j]]])
            result = np.dot(T, rgb) + np.array([[16], [128], [128]])
            y[i, j] = result[0]
            u[i, j] = result[1]
            v[i, j] = result[2]


    return y, u, v
#<----- color plane change (end) ----->#

#<----- 假彩色 (start) ----->#
# 填入RGBA（0-1）
def fake_color(gray, colorarray):
    # colorarray = [[1, 0, 0 ,1 ], [0, 0.4116, 0.27107143 ,1 ], [.57647055, 0, 0.27107143 ,1 ]]
    Cmap = LinearSegmentedColormap.from_list('myCmap', colors = colorarray, N = 256)
    # get cmap array
    cmap = plt.cm.get_cmap(Cmap)
    colors = cmap(np.arange(cmap.N))

    # creat image for colormap
    color_img = np.ones((32, 256, 3))
    for k in range(3):
        for i in range(32):
            for j in range(256):
                color_img[i , j, k] = colors[j][k] * 255
    color_img = cv2.cvtColor(color_img.astype('uint8'), cv2.COLOR_RGB2BGR)      
    R = np.ones(gray.shape)
    G = np.ones(gray.shape)
    B = np.ones(gray.shape)
    h, w =gray.shape
    for i in range(h):
        for j in range(w):
            R[i, j] = colors[gray[i, j]][0]
            G[i, j] = colors[gray[i, j]][1]
            B[i, j] = colors[gray[i, j]][2]
    BGR = cv2.merge((B, G, R)) * 255
    return BGR, color_img
#<----- 假彩色 (end) ----->#

#<----- Kmeans (start) ----->#
def Kmeans(img, K):
    # show_type = 1 : RGB
    # show_type = 2 : HSI
    # show_type = 3 : Lab
    Z = img.reshape((-1,3)) # 將每一通道從2D變成1D
    # convert to np.float32
    Z = np.float32(Z)
    # define criteria, number of clusters(K) and apply kmeans()
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
    ret, label, center = cv2.kmeans(Z, K, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)
    # Now convert back into uint8, and make original image
    center = np.uint8(center)
    res = center[label.flatten()]
    res_BGR = res.reshape((img.shape))
    res_HSI = cv2.cvtColor(res_BGR, cv2.COLOR_BGR2HLS)   
    res_LAB = cv2.cvtColor(res_BGR, cv2.COLOR_BGR2LAB)   
    return res_BGR, res_HSI, res_LAB
#<----- Kmeans (end) ----->#



if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    mainwindow = QtWidgets.QWidget()
    ui = Ui_MainWindow()
    ui.setupUi(mainwindow)
    mainwindow.show()
    sys.exit(app.exec())